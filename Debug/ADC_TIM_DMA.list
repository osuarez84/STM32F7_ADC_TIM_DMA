
ADC_TIM_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d28  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08001f20  08001f20  00011f20  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001f54  08001f54  00011f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001f58  08001f58  00011f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001f5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000010c  20000004  08001f60  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000110  08001f60  00020110  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   000140e0  00000000  00000000  00020032  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002539  00000000  00000000  00034112  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000065a7  00000000  00000000  0003664b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000008c8  00000000  00000000  0003cbf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000bc8  00000000  00000000  0003d4c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000053c7  00000000  00000000  0003e088  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003cdb  00000000  00000000  0004344f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004712a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001880  00000000  00000000  000471a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000004 	.word	0x20000004
 8000214:	00000000 	.word	0x00000000
 8000218:	08001f08 	.word	0x08001f08

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000008 	.word	0x20000008
 8000234:	08001f08 	.word	0x08001f08

08000238 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000238:	4b08      	ldr	r3, [pc, #32]	; (800025c <HAL_InitTick+0x24>)
{
 800023a:	b510      	push	{r4, lr}
 800023c:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 800023e:	6818      	ldr	r0, [r3, #0]
 8000240:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000244:	fbb0 f0f3 	udiv	r0, r0, r3
 8000248:	f000 fb18 	bl	800087c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800024c:	2200      	movs	r2, #0
 800024e:	4621      	mov	r1, r4
 8000250:	f04f 30ff 	mov.w	r0, #4294967295
 8000254:	f000 face 	bl	80007f4 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000258:	2000      	movs	r0, #0
 800025a:	bd10      	pop	{r4, pc}
 800025c:	20000000 	.word	0x20000000

08000260 <HAL_Init>:
{
 8000260:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000262:	2003      	movs	r0, #3
 8000264:	f000 fab4 	bl	80007d0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000268:	2000      	movs	r0, #0
 800026a:	f7ff ffe5 	bl	8000238 <HAL_InitTick>
  HAL_MspInit();
 800026e:	f001 fd12 	bl	8001c96 <HAL_MspInit>
}
 8000272:	2000      	movs	r0, #0
 8000274:	bd08      	pop	{r3, pc}
	...

08000278 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000278:	4a02      	ldr	r2, [pc, #8]	; (8000284 <HAL_IncTick+0xc>)
 800027a:	6813      	ldr	r3, [r2, #0]
 800027c:	3301      	adds	r3, #1
 800027e:	6013      	str	r3, [r2, #0]
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	20000024 	.word	0x20000024

08000288 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000288:	4b01      	ldr	r3, [pc, #4]	; (8000290 <HAL_GetTick+0x8>)
 800028a:	6818      	ldr	r0, [r3, #0]
}
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	20000024 	.word	0x20000024

08000294 <HAL_ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000294:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000296:	4604      	mov	r4, r0
 8000298:	2800      	cmp	r0, #0
 800029a:	f000 8099 	beq.w	80003d0 <HAL_ADC_Init+0x13c>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800029e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80002a0:	b923      	cbnz	r3, 80002ac <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80002a2:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80002a4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80002a8:	f001 fd26 	bl	8001cf8 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80002ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80002ae:	06db      	lsls	r3, r3, #27
 80002b0:	f100 808c 	bmi.w	80003cc <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80002b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80002b6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80002ba:	f023 0302 	bic.w	r3, r3, #2
 80002be:	f043 0302 	orr.w	r3, r3, #2
 80002c2:	6423      	str	r3, [r4, #64]	; 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80002c4:	4b43      	ldr	r3, [pc, #268]	; (80003d4 <HAL_ADC_Init+0x140>)
 80002c6:	685a      	ldr	r2, [r3, #4]
 80002c8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80002cc:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80002ce:	685a      	ldr	r2, [r3, #4]
 80002d0:	6861      	ldr	r1, [r4, #4]
 80002d2:	430a      	orrs	r2, r1
 80002d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80002d6:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80002d8:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80002da:	685a      	ldr	r2, [r3, #4]
 80002dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80002e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80002e2:	685a      	ldr	r2, [r3, #4]
 80002e4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80002e8:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80002ea:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80002ec:	685a      	ldr	r2, [r3, #4]
 80002ee:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80002f2:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80002f4:	685a      	ldr	r2, [r3, #4]
 80002f6:	430a      	orrs	r2, r1
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80002f8:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80002fa:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80002fc:	689a      	ldr	r2, [r3, #8]
 80002fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000302:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000304:	689a      	ldr	r2, [r3, #8]
 8000306:	430a      	orrs	r2, r1
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000308:	4933      	ldr	r1, [pc, #204]	; (80003d8 <HAL_ADC_Init+0x144>)
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800030a:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800030c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800030e:	428a      	cmp	r2, r1
 8000310:	d050      	beq.n	80003b4 <HAL_ADC_Init+0x120>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000312:	6899      	ldr	r1, [r3, #8]
 8000314:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000318:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800031a:	6899      	ldr	r1, [r3, #8]
 800031c:	430a      	orrs	r2, r1
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800031e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000320:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000322:	689a      	ldr	r2, [r3, #8]
 8000324:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000328:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800032a:	689a      	ldr	r2, [r3, #8]
 800032c:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800032e:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000330:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000332:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000334:	f022 0202 	bic.w	r2, r2, #2
 8000338:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 800033a:	689a      	ldr	r2, [r3, #8]
 800033c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000340:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000342:	6a22      	ldr	r2, [r4, #32]
 8000344:	2a00      	cmp	r2, #0
 8000346:	d03d      	beq.n	80003c4 <HAL_ADC_Init+0x130>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000348:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800034a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800034c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000350:	3901      	subs	r1, #1
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000352:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000354:	685a      	ldr	r2, [r3, #4]
 8000356:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800035a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800035c:	685a      	ldr	r2, [r3, #4]
 800035e:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000362:	605a      	str	r2, [r3, #4]
    ADC_CLEAR_ERRORCODE(hadc);
 8000364:	2000      	movs	r0, #0
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000368:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800036a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800036e:	3901      	subs	r1, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000370:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000374:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000378:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800037a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800037c:	689a      	ldr	r2, [r3, #8]
 800037e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000382:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000384:	689a      	ldr	r2, [r3, #8]
 8000386:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800038a:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 800038c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800038e:	689a      	ldr	r2, [r3, #8]
 8000390:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000394:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000396:	689a      	ldr	r2, [r3, #8]
 8000398:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 800039c:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800039e:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80003a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80003a2:	f023 0303 	bic.w	r3, r3, #3
 80003a6:	f043 0301 	orr.w	r3, r3, #1
 80003aa:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80003ac:	2300      	movs	r3, #0
 80003ae:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 80003b2:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80003b4:	689a      	ldr	r2, [r3, #8]
 80003b6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80003ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80003bc:	689a      	ldr	r2, [r3, #8]
 80003be:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80003c2:	e7b4      	b.n	800032e <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80003c4:	685a      	ldr	r2, [r3, #4]
 80003c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80003ca:	e7ca      	b.n	8000362 <HAL_ADC_Init+0xce>
    tmp_hal_status = HAL_ERROR;
 80003cc:	2001      	movs	r0, #1
 80003ce:	e7ed      	b.n	80003ac <HAL_ADC_Init+0x118>
    return HAL_ERROR;
 80003d0:	2001      	movs	r0, #1
}
 80003d2:	bd10      	pop	{r4, pc}
 80003d4:	40012300 	.word	0x40012300
 80003d8:	0f000001 	.word	0x0f000001

080003dc <HAL_ADC_Start_DMA>:
{
 80003dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80003de:	4613      	mov	r3, r2
  __IO uint32_t counter = 0;
 80003e0:	2200      	movs	r2, #0
{
 80003e2:	4604      	mov	r4, r0
  __IO uint32_t counter = 0;
 80003e4:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80003e6:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80003ea:	2a01      	cmp	r2, #1
 80003ec:	d065      	beq.n	80004ba <HAL_ADC_Start_DMA+0xde>
 80003ee:	2201      	movs	r2, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80003f0:	6805      	ldr	r5, [r0, #0]
  __HAL_LOCK(hadc);
 80003f2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80003f6:	68aa      	ldr	r2, [r5, #8]
 80003f8:	07d2      	lsls	r2, r2, #31
 80003fa:	d505      	bpl.n	8000408 <HAL_ADC_Start_DMA+0x2c>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80003fc:	68aa      	ldr	r2, [r5, #8]
 80003fe:	07d0      	lsls	r0, r2, #31
 8000400:	d415      	bmi.n	800042e <HAL_ADC_Start_DMA+0x52>
  return HAL_OK;
 8000402:	2000      	movs	r0, #0
}
 8000404:	b003      	add	sp, #12
 8000406:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8000408:	68aa      	ldr	r2, [r5, #8]
 800040a:	f042 0201 	orr.w	r2, r2, #1
 800040e:	60aa      	str	r2, [r5, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000410:	4a2b      	ldr	r2, [pc, #172]	; (80004c0 <HAL_ADC_Start_DMA+0xe4>)
 8000412:	6810      	ldr	r0, [r2, #0]
 8000414:	4a2b      	ldr	r2, [pc, #172]	; (80004c4 <HAL_ADC_Start_DMA+0xe8>)
 8000416:	fbb0 f0f2 	udiv	r0, r0, r2
 800041a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800041e:	9001      	str	r0, [sp, #4]
    while(counter != 0)
 8000420:	9a01      	ldr	r2, [sp, #4]
 8000422:	2a00      	cmp	r2, #0
 8000424:	d0ea      	beq.n	80003fc <HAL_ADC_Start_DMA+0x20>
      counter--;
 8000426:	9a01      	ldr	r2, [sp, #4]
 8000428:	3a01      	subs	r2, #1
 800042a:	9201      	str	r2, [sp, #4]
 800042c:	e7f8      	b.n	8000420 <HAL_ADC_Start_DMA+0x44>
    ADC_STATE_CLR_SET(hadc->State,
 800042e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8000430:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8000434:	f020 0001 	bic.w	r0, r0, #1
 8000438:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 800043c:	6420      	str	r0, [r4, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800043e:	686a      	ldr	r2, [r5, #4]
 8000440:	0552      	lsls	r2, r2, #21
 8000442:	d505      	bpl.n	8000450 <HAL_ADC_Start_DMA+0x74>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000444:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8000446:	f420 5040 	bic.w	r0, r0, #12288	; 0x3000
 800044a:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 800044e:	6420      	str	r0, [r4, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000450:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000452:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000456:	d002      	beq.n	800045e <HAL_ADC_Start_DMA+0x82>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000458:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800045a:	f022 0206 	bic.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 800045e:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(hadc);   
 8000460:	2200      	movs	r2, #0
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000462:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    __HAL_UNLOCK(hadc);   
 8000464:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000468:	4a17      	ldr	r2, [pc, #92]	; (80004c8 <HAL_ADC_Start_DMA+0xec>)
 800046a:	63c2      	str	r2, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800046c:	4a17      	ldr	r2, [pc, #92]	; (80004cc <HAL_ADC_Start_DMA+0xf0>)
 800046e:	6402      	str	r2, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000470:	4a17      	ldr	r2, [pc, #92]	; (80004d0 <HAL_ADC_Start_DMA+0xf4>)
 8000472:	64c2      	str	r2, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000474:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000478:	602a      	str	r2, [r5, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800047a:	686a      	ldr	r2, [r5, #4]
 800047c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000480:	606a      	str	r2, [r5, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000482:	68aa      	ldr	r2, [r5, #8]
 8000484:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000488:	60aa      	str	r2, [r5, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800048a:	460a      	mov	r2, r1
 800048c:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 8000490:	f000 fab0 	bl	80009f4 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8000494:	4b0f      	ldr	r3, [pc, #60]	; (80004d4 <HAL_ADC_Start_DMA+0xf8>)
 8000496:	685b      	ldr	r3, [r3, #4]
 8000498:	f013 0f1f 	tst.w	r3, #31
 800049c:	6823      	ldr	r3, [r4, #0]
 800049e:	d108      	bne.n	80004b2 <HAL_ADC_Start_DMA+0xd6>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80004a0:	6898      	ldr	r0, [r3, #8]
 80004a2:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80004a6:	d1ac      	bne.n	8000402 <HAL_ADC_Start_DMA+0x26>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80004a8:	689a      	ldr	r2, [r3, #8]
 80004aa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80004ae:	609a      	str	r2, [r3, #8]
 80004b0:	e7a8      	b.n	8000404 <HAL_ADC_Start_DMA+0x28>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80004b2:	4a09      	ldr	r2, [pc, #36]	; (80004d8 <HAL_ADC_Start_DMA+0xfc>)
 80004b4:	4293      	cmp	r3, r2
 80004b6:	d1a4      	bne.n	8000402 <HAL_ADC_Start_DMA+0x26>
 80004b8:	e7f2      	b.n	80004a0 <HAL_ADC_Start_DMA+0xc4>
  __HAL_LOCK(hadc);
 80004ba:	2002      	movs	r0, #2
 80004bc:	e7a2      	b.n	8000404 <HAL_ADC_Start_DMA+0x28>
 80004be:	bf00      	nop
 80004c0:	20000000 	.word	0x20000000
 80004c4:	000f4240 	.word	0x000f4240
 80004c8:	080004dd 	.word	0x080004dd
 80004cc:	0800053f 	.word	0x0800053f
 80004d0:	08000675 	.word	0x08000675
 80004d4:	40012300 	.word	0x40012300
 80004d8:	40012000 	.word	0x40012000

080004dc <ADC_DMAConvCplt>:
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80004dc:	6b83      	ldr	r3, [r0, #56]	; 0x38
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80004de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004e0:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 80004e4:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80004e6:	d124      	bne.n	8000532 <ADC_DMAConvCplt+0x56>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80004e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80004ee:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80004f0:	681a      	ldr	r2, [r3, #0]
 80004f2:	6891      	ldr	r1, [r2, #8]
 80004f4:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 80004f8:	d117      	bne.n	800052a <ADC_DMAConvCplt+0x4e>
 80004fa:	6999      	ldr	r1, [r3, #24]
 80004fc:	b9a9      	cbnz	r1, 800052a <ADC_DMAConvCplt+0x4e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80004fe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000500:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 8000504:	d002      	beq.n	800050c <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000506:	6891      	ldr	r1, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000508:	0549      	lsls	r1, r1, #21
 800050a:	d40e      	bmi.n	800052a <ADC_DMAConvCplt+0x4e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800050c:	6851      	ldr	r1, [r2, #4]
 800050e:	f021 0120 	bic.w	r1, r1, #32
 8000512:	6051      	str	r1, [r2, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000514:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000516:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800051a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800051c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800051e:	04d2      	lsls	r2, r2, #19
 8000520:	d403      	bmi.n	800052a <ADC_DMAConvCplt+0x4e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000522:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000524:	f042 0201 	orr.w	r2, r2, #1
 8000528:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc);
 800052a:	4618      	mov	r0, r3
 800052c:	f001 fbac 	bl	8001c88 <HAL_ADC_ConvCpltCallback>
 8000530:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  }
}
 8000534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053a:	4718      	bx	r3

0800053c <HAL_ADC_ConvHalfCpltCallback>:
 800053c:	4770      	bx	lr

0800053e <ADC_DMAHalfConvCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800053e:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  /* Conversion complete callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8000540:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8000542:	f7ff fffb 	bl	800053c <HAL_ADC_ConvHalfCpltCallback>
 8000546:	bd08      	pop	{r3, pc}

08000548 <HAL_ADC_LevelOutOfWindowCallback>:
 8000548:	4770      	bx	lr

0800054a <HAL_ADC_ErrorCallback>:
{
 800054a:	4770      	bx	lr

0800054c <HAL_ADC_IRQHandler>:
{
 800054c:	b538      	push	{r3, r4, r5, lr}
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800054e:	6803      	ldr	r3, [r0, #0]
{
 8000550:	4604      	mov	r4, r0
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8000552:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8000554:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8000556:	078d      	lsls	r5, r1, #30
 8000558:	d52b      	bpl.n	80005b2 <HAL_ADC_IRQHandler+0x66>
 800055a:	0690      	lsls	r0, r2, #26
 800055c:	d529      	bpl.n	80005b2 <HAL_ADC_IRQHandler+0x66>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800055e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000560:	06d1      	lsls	r1, r2, #27
 8000562:	d403      	bmi.n	800056c <HAL_ADC_IRQHandler+0x20>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000564:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000566:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800056a:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800056c:	689a      	ldr	r2, [r3, #8]
 800056e:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000572:	d117      	bne.n	80005a4 <HAL_ADC_IRQHandler+0x58>
 8000574:	69a2      	ldr	r2, [r4, #24]
 8000576:	b9aa      	cbnz	r2, 80005a4 <HAL_ADC_IRQHandler+0x58>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800057a:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 800057e:	d002      	beq.n	8000586 <HAL_ADC_IRQHandler+0x3a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000580:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000582:	0552      	lsls	r2, r2, #21
 8000584:	d40e      	bmi.n	80005a4 <HAL_ADC_IRQHandler+0x58>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000586:	685a      	ldr	r2, [r3, #4]
 8000588:	f022 0220 	bic.w	r2, r2, #32
 800058c:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800058e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000590:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000594:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000596:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000598:	04db      	lsls	r3, r3, #19
 800059a:	d403      	bmi.n	80005a4 <HAL_ADC_IRQHandler+0x58>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800059c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800059e:	f043 0301 	orr.w	r3, r3, #1
 80005a2:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 80005a4:	4620      	mov	r0, r4
 80005a6:	f001 fb6f 	bl	8001c88 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80005aa:	6823      	ldr	r3, [r4, #0]
 80005ac:	f06f 0212 	mvn.w	r2, #18
 80005b0:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80005b2:	6823      	ldr	r3, [r4, #0]
 80005b4:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80005b6:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80005b8:	074d      	lsls	r5, r1, #29
 80005ba:	d532      	bpl.n	8000622 <HAL_ADC_IRQHandler+0xd6>
 80005bc:	0610      	lsls	r0, r2, #24
 80005be:	d530      	bpl.n	8000622 <HAL_ADC_IRQHandler+0xd6>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80005c0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80005c2:	06d1      	lsls	r1, r2, #27
 80005c4:	d403      	bmi.n	80005ce <HAL_ADC_IRQHandler+0x82>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80005c6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80005c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80005cc:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80005ce:	689a      	ldr	r2, [r3, #8]
 80005d0:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80005d4:	d11e      	bne.n	8000614 <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80005d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80005d8:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80005dc:	d002      	beq.n	80005e4 <HAL_ADC_IRQHandler+0x98>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80005de:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80005e0:	0552      	lsls	r2, r2, #21
 80005e2:	d417      	bmi.n	8000614 <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80005e4:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80005e6:	0555      	lsls	r5, r2, #21
 80005e8:	d414      	bmi.n	8000614 <HAL_ADC_IRQHandler+0xc8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80005ea:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80005ec:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80005f0:	d110      	bne.n	8000614 <HAL_ADC_IRQHandler+0xc8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80005f2:	69a2      	ldr	r2, [r4, #24]
 80005f4:	b972      	cbnz	r2, 8000614 <HAL_ADC_IRQHandler+0xc8>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80005f6:	685a      	ldr	r2, [r3, #4]
 80005f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80005fc:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80005fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000600:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000604:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000606:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000608:	05d8      	lsls	r0, r3, #23
 800060a:	d403      	bmi.n	8000614 <HAL_ADC_IRQHandler+0xc8>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800060c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800060e:	f043 0301 	orr.w	r3, r3, #1
 8000612:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000614:	4620      	mov	r0, r4
 8000616:	f000 f8d9 	bl	80007cc <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800061a:	6823      	ldr	r3, [r4, #0]
 800061c:	f06f 020c 	mvn.w	r2, #12
 8000620:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8000622:	6823      	ldr	r3, [r4, #0]
 8000624:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8000626:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8000628:	07c9      	lsls	r1, r1, #31
 800062a:	d50f      	bpl.n	800064c <HAL_ADC_IRQHandler+0x100>
 800062c:	0655      	lsls	r5, r2, #25
 800062e:	d50d      	bpl.n	800064c <HAL_ADC_IRQHandler+0x100>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	07d8      	lsls	r0, r3, #31
 8000634:	d50a      	bpl.n	800064c <HAL_ADC_IRQHandler+0x100>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000636:	6c23      	ldr	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000638:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800063a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800063e:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000640:	f7ff ff82 	bl	8000548 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000644:	6823      	ldr	r3, [r4, #0]
 8000646:	f06f 0201 	mvn.w	r2, #1
 800064a:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800064c:	6823      	ldr	r3, [r4, #0]
 800064e:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8000650:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8000652:	0689      	lsls	r1, r1, #26
 8000654:	d50d      	bpl.n	8000672 <HAL_ADC_IRQHandler+0x126>
 8000656:	0152      	lsls	r2, r2, #5
 8000658:	d50b      	bpl.n	8000672 <HAL_ADC_IRQHandler+0x126>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800065a:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800065c:	f06f 0520 	mvn.w	r5, #32
    HAL_ADC_ErrorCallback(hadc);
 8000660:	4620      	mov	r0, r4
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000662:	f042 0202 	orr.w	r2, r2, #2
 8000666:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000668:	601d      	str	r5, [r3, #0]
    HAL_ADC_ErrorCallback(hadc);
 800066a:	f7ff ff6e 	bl	800054a <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800066e:	6823      	ldr	r3, [r4, #0]
 8000670:	601d      	str	r5, [r3, #0]
 8000672:	bd38      	pop	{r3, r4, r5, pc}

08000674 <ADC_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000674:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000676:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8000678:	2340      	movs	r3, #64	; 0x40
 800067a:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800067c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800067e:	f043 0304 	orr.w	r3, r3, #4
 8000682:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_ADC_ErrorCallback(hadc); 
 8000684:	f7ff ff61 	bl	800054a <HAL_ADC_ErrorCallback>
 8000688:	bd08      	pop	{r3, pc}
	...

0800068c <HAL_ADC_ConfigChannel>:
  __IO uint32_t counter = 0;
 800068c:	2300      	movs	r3, #0
{
 800068e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 8000690:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000692:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000696:	2b01      	cmp	r3, #1
 8000698:	d071      	beq.n	800077e <HAL_ADC_ConfigChannel+0xf2>
	if (sConfig->Channel > ADC_CHANNEL_9)
 800069a:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 800069c:	2301      	movs	r3, #1
 800069e:	6804      	ldr	r4, [r0, #0]
	if (sConfig->Channel > ADC_CHANNEL_9)
 80006a0:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 80006a2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80006a6:	b2ae      	uxth	r6, r5
 80006a8:	688a      	ldr	r2, [r1, #8]
	if (sConfig->Channel > ADC_CHANNEL_9)
 80006aa:	d931      	bls.n	8000710 <HAL_ADC_ConfigChannel+0x84>
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80006ac:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80006b0:	f04f 0e07 	mov.w	lr, #7
 80006b4:	68e7      	ldr	r7, [r4, #12]
 80006b6:	3b1e      	subs	r3, #30
 80006b8:	fa0e fe03 	lsl.w	lr, lr, r3
 80006bc:	ea27 070e 	bic.w	r7, r7, lr
 80006c0:	60e7      	str	r7, [r4, #12]
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80006c2:	4f3d      	ldr	r7, [pc, #244]	; (80007b8 <HAL_ADC_ConfigChannel+0x12c>)
 80006c4:	42bd      	cmp	r5, r7
 80006c6:	d11e      	bne.n	8000706 <HAL_ADC_ConfigChannel+0x7a>
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80006c8:	68e3      	ldr	r3, [r4, #12]
 80006ca:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80006ce:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7)
 80006d0:	684a      	ldr	r2, [r1, #4]
 80006d2:	2a06      	cmp	r2, #6
 80006d4:	ea4f 0382 	mov.w	r3, r2, lsl #2
 80006d8:	d82a      	bhi.n	8000730 <HAL_ADC_ConfigChannel+0xa4>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80006da:	4413      	add	r3, r2
 80006dc:	6b67      	ldr	r7, [r4, #52]	; 0x34
 80006de:	1f59      	subs	r1, r3, #5
 80006e0:	231f      	movs	r3, #31
 80006e2:	408b      	lsls	r3, r1
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80006e4:	fa06 f101 	lsl.w	r1, r6, r1
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80006e8:	ea27 0303 	bic.w	r3, r7, r3
 80006ec:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80006ee:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80006f0:	4311      	orrs	r1, r2
 80006f2:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80006f4:	4b31      	ldr	r3, [pc, #196]	; (80007bc <HAL_ADC_ConfigChannel+0x130>)
 80006f6:	429c      	cmp	r4, r3
 80006f8:	d039      	beq.n	800076e <HAL_ADC_ConfigChannel+0xe2>
  __HAL_UNLOCK(hadc);
 80006fa:	2300      	movs	r3, #0
 80006fc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8000700:	4618      	mov	r0, r3
}
 8000702:	b003      	add	sp, #12
 8000704:	bdf0      	pop	{r4, r5, r6, r7, pc}
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000706:	68e7      	ldr	r7, [r4, #12]
 8000708:	fa02 f303 	lsl.w	r3, r2, r3
 800070c:	433b      	orrs	r3, r7
 800070e:	e7de      	b.n	80006ce <HAL_ADC_ConfigChannel+0x42>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000710:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000714:	f04f 0e07 	mov.w	lr, #7
 8000718:	6927      	ldr	r7, [r4, #16]
 800071a:	fa0e fe03 	lsl.w	lr, lr, r3
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800071e:	fa02 f303 	lsl.w	r3, r2, r3
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000722:	ea27 070e 	bic.w	r7, r7, lr
 8000726:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000728:	6927      	ldr	r7, [r4, #16]
 800072a:	433b      	orrs	r3, r7
 800072c:	6123      	str	r3, [r4, #16]
 800072e:	e7cf      	b.n	80006d0 <HAL_ADC_ConfigChannel+0x44>
  else if (sConfig->Rank < 13)
 8000730:	2a0c      	cmp	r2, #12
 8000732:	d80e      	bhi.n	8000752 <HAL_ADC_ConfigChannel+0xc6>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000734:	4413      	add	r3, r2
 8000736:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000738:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 800073c:	231f      	movs	r3, #31
 800073e:	4093      	lsls	r3, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000740:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000744:	ea21 0303 	bic.w	r3, r1, r3
 8000748:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800074a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800074c:	431a      	orrs	r2, r3
 800074e:	6322      	str	r2, [r4, #48]	; 0x30
 8000750:	e7d0      	b.n	80006f4 <HAL_ADC_ConfigChannel+0x68>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000752:	4413      	add	r3, r2
 8000754:	221f      	movs	r2, #31
 8000756:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000758:	3b41      	subs	r3, #65	; 0x41
 800075a:	409a      	lsls	r2, r3
 800075c:	ea21 0202 	bic.w	r2, r1, r2
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000760:	fa06 f103 	lsl.w	r1, r6, r3
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000764:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000766:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000768:	4311      	orrs	r1, r2
 800076a:	62e1      	str	r1, [r4, #44]	; 0x2c
 800076c:	e7c2      	b.n	80006f4 <HAL_ADC_ConfigChannel+0x68>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800076e:	2d12      	cmp	r5, #18
 8000770:	d107      	bne.n	8000782 <HAL_ADC_ConfigChannel+0xf6>
    ADC->CCR |= ADC_CCR_VBATE;
 8000772:	4a13      	ldr	r2, [pc, #76]	; (80007c0 <HAL_ADC_ConfigChannel+0x134>)
 8000774:	6853      	ldr	r3, [r2, #4]
 8000776:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800077a:	6053      	str	r3, [r2, #4]
 800077c:	e7bd      	b.n	80006fa <HAL_ADC_ConfigChannel+0x6e>
  __HAL_LOCK(hadc);
 800077e:	2002      	movs	r0, #2
 8000780:	e7bf      	b.n	8000702 <HAL_ADC_ConfigChannel+0x76>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000782:	4b0d      	ldr	r3, [pc, #52]	; (80007b8 <HAL_ADC_ConfigChannel+0x12c>)
 8000784:	429d      	cmp	r5, r3
 8000786:	d001      	beq.n	800078c <HAL_ADC_ConfigChannel+0x100>
 8000788:	2d11      	cmp	r5, #17
 800078a:	d1b6      	bne.n	80006fa <HAL_ADC_ConfigChannel+0x6e>
    ADC->CCR |= ADC_CCR_TSVREFE;
 800078c:	490c      	ldr	r1, [pc, #48]	; (80007c0 <HAL_ADC_ConfigChannel+0x134>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800078e:	429d      	cmp	r5, r3
    ADC->CCR |= ADC_CCR_TSVREFE;
 8000790:	684a      	ldr	r2, [r1, #4]
 8000792:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000796:	604a      	str	r2, [r1, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000798:	d1af      	bne.n	80006fa <HAL_ADC_ConfigChannel+0x6e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800079a:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <HAL_ADC_ConfigChannel+0x138>)
 800079c:	4a0a      	ldr	r2, [pc, #40]	; (80007c8 <HAL_ADC_ConfigChannel+0x13c>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	fbb3 f2f2 	udiv	r2, r3, r2
 80007a4:	230a      	movs	r3, #10
 80007a6:	4353      	muls	r3, r2
        counter--;
 80007a8:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 80007aa:	9b01      	ldr	r3, [sp, #4]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d0a4      	beq.n	80006fa <HAL_ADC_ConfigChannel+0x6e>
        counter--;
 80007b0:	9b01      	ldr	r3, [sp, #4]
 80007b2:	3b01      	subs	r3, #1
 80007b4:	e7f8      	b.n	80007a8 <HAL_ADC_ConfigChannel+0x11c>
 80007b6:	bf00      	nop
 80007b8:	10000012 	.word	0x10000012
 80007bc:	40012000 	.word	0x40012000
 80007c0:	40012300 	.word	0x40012300
 80007c4:	20000000 	.word	0x20000000
 80007c8:	000f4240 	.word	0x000f4240

080007cc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80007cc:	4770      	bx	lr
	...

080007d0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007d0:	4a07      	ldr	r2, [pc, #28]	; (80007f0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80007d2:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007d4:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80007d6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007da:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80007de:	041b      	lsls	r3, r3, #16
 80007e0:	0c1b      	lsrs	r3, r3, #16
 80007e2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80007ea:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80007ec:	60d3      	str	r3, [r2, #12]
 80007ee:	4770      	bx	lr
 80007f0:	e000ed00 	.word	0xe000ed00

080007f4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007f4:	4b19      	ldr	r3, [pc, #100]	; (800085c <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007f6:	b530      	push	{r4, r5, lr}
 80007f8:	68dc      	ldr	r4, [r3, #12]
 80007fa:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007fe:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000802:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000804:	2b04      	cmp	r3, #4
 8000806:	bf28      	it	cs
 8000808:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800080a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800080c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000810:	bf8c      	ite	hi
 8000812:	3c03      	subhi	r4, #3
 8000814:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000816:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) < 0)
 800081a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800081c:	f103 33ff 	add.w	r3, r3, #4294967295
 8000820:	ea01 0103 	and.w	r1, r1, r3
 8000824:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000828:	fa05 f404 	lsl.w	r4, r5, r4
 800082c:	f104 34ff 	add.w	r4, r4, #4294967295
 8000830:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000834:	ea42 0201 	orr.w	r2, r2, r1
 8000838:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) < 0)
 800083c:	da05      	bge.n	800084a <HAL_NVIC_SetPriority+0x56>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800083e:	f000 000f 	and.w	r0, r0, #15
 8000842:	b2d2      	uxtb	r2, r2
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <HAL_NVIC_SetPriority+0x6c>)
 8000846:	541a      	strb	r2, [r3, r0]
 8000848:	bd30      	pop	{r4, r5, pc}
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800084a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800084e:	b2d2      	uxtb	r2, r2
 8000850:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000854:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8000858:	bd30      	pop	{r4, r5, pc}
 800085a:	bf00      	nop
 800085c:	e000ed00 	.word	0xe000ed00
 8000860:	e000ed14 	.word	0xe000ed14

08000864 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000864:	0942      	lsrs	r2, r0, #5
 8000866:	2301      	movs	r3, #1
 8000868:	f000 001f 	and.w	r0, r0, #31
 800086c:	fa03 f000 	lsl.w	r0, r3, r0
 8000870:	4b01      	ldr	r3, [pc, #4]	; (8000878 <HAL_NVIC_EnableIRQ+0x14>)
 8000872:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000876:	4770      	bx	lr
 8000878:	e000e100 	.word	0xe000e100

0800087c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800087c:	3801      	subs	r0, #1
 800087e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000882:	d20a      	bcs.n	800089a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000886:	21f0      	movs	r1, #240	; 0xf0
 8000888:	4a06      	ldr	r2, [pc, #24]	; (80008a4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800088a:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800088c:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800088e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000892:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000894:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800089a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	e000e010 	.word	0xe000e010
 80008a4:	e000ed00 	.word	0xe000ed00

080008a8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80008a8:	4b04      	ldr	r3, [pc, #16]	; (80008bc <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80008aa:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	bf0c      	ite	eq
 80008b0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80008b4:	f022 0204 	bicne.w	r2, r2, #4
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	4770      	bx	lr
 80008bc:	e000e010 	.word	0xe000e010

080008c0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80008c0:	4770      	bx	lr

080008c2 <HAL_SYSTICK_IRQHandler>:
{
 80008c2:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80008c4:	f7ff fffc 	bl	80008c0 <HAL_SYSTICK_Callback>
 80008c8:	bd08      	pop	{r3, pc}
	...

080008cc <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80008cc:	6803      	ldr	r3, [r0, #0]
 80008ce:	2118      	movs	r1, #24
 80008d0:	b2da      	uxtb	r2, r3
 80008d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80008d6:	3a10      	subs	r2, #16
 80008d8:	f023 0303 	bic.w	r3, r3, #3
 80008dc:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80008e0:	4904      	ldr	r1, [pc, #16]	; (80008f4 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 80008e2:	2a03      	cmp	r2, #3
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80008e4:	5c89      	ldrb	r1, [r1, r2]
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80008e6:	bf88      	it	hi
 80008e8:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80008ea:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80008ec:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 80008ee:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	08001f20 	.word	0x08001f20

080008f8 <HAL_DMA_Init>:
{
 80008f8:	b570      	push	{r4, r5, r6, lr}
 80008fa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80008fc:	f7ff fcc4 	bl	8000288 <HAL_GetTick>
 8000900:	4605      	mov	r5, r0
  if(hdma == NULL)
 8000902:	2c00      	cmp	r4, #0
 8000904:	d071      	beq.n	80009ea <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8000906:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
 8000908:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 800090a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 800090e:	2302      	movs	r3, #2
 8000910:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000914:	6813      	ldr	r3, [r2, #0]
 8000916:	f023 0301 	bic.w	r3, r3, #1
 800091a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800091c:	6821      	ldr	r1, [r4, #0]
 800091e:	680b      	ldr	r3, [r1, #0]
 8000920:	07d8      	lsls	r0, r3, #31
 8000922:	d43c      	bmi.n	800099e <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8000924:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000926:	4d32      	ldr	r5, [pc, #200]	; (80009f0 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000928:	6862      	ldr	r2, [r4, #4]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800092a:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800092c:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800092e:	69a0      	ldr	r0, [r4, #24]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000930:	4313      	orrs	r3, r2
 8000932:	68e2      	ldr	r2, [r4, #12]
 8000934:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000936:	6922      	ldr	r2, [r4, #16]
 8000938:	4313      	orrs	r3, r2
 800093a:	6962      	ldr	r2, [r4, #20]
 800093c:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800093e:	69e2      	ldr	r2, [r4, #28]
 8000940:	4303      	orrs	r3, r0
 8000942:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8000944:	6a22      	ldr	r2, [r4, #32]
 8000946:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000948:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800094a:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800094c:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000950:	bf01      	itttt	eq
 8000952:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8000954:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 8000956:	4335      	orreq	r5, r6
 8000958:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800095a:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 800095c:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 800095e:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000960:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8000964:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000968:	d10b      	bne.n	8000982 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 800096a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800096c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 800096e:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000970:	b13d      	cbz	r5, 8000982 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000972:	b9f8      	cbnz	r0, 80009b4 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8000974:	2a01      	cmp	r2, #1
 8000976:	d02d      	beq.n	80009d4 <HAL_DMA_Init+0xdc>
 8000978:	d301      	bcc.n	800097e <HAL_DMA_Init+0x86>
 800097a:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800097c:	d101      	bne.n	8000982 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800097e:	01ea      	lsls	r2, r5, #7
 8000980:	d42b      	bmi.n	80009da <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8000982:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000984:	4620      	mov	r0, r4
 8000986:	f7ff ffa1 	bl	80008cc <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800098a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800098c:	233f      	movs	r3, #63	; 0x3f
 800098e:	4093      	lsls	r3, r2
 8000990:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000992:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000994:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000996:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000998:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800099c:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800099e:	f7ff fc73 	bl	8000288 <HAL_GetTick>
 80009a2:	1b40      	subs	r0, r0, r5
 80009a4:	2805      	cmp	r0, #5
 80009a6:	d9b9      	bls.n	800091c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80009a8:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80009aa:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80009ac:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80009ae:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80009b2:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80009b4:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80009b8:	d113      	bne.n	80009e2 <HAL_DMA_Init+0xea>
    switch (tmp)
 80009ba:	2a03      	cmp	r2, #3
 80009bc:	d8e1      	bhi.n	8000982 <HAL_DMA_Init+0x8a>
 80009be:	a001      	add	r0, pc, #4	; (adr r0, 80009c4 <HAL_DMA_Init+0xcc>)
 80009c0:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80009c4:	080009db 	.word	0x080009db
 80009c8:	0800097f 	.word	0x0800097f
 80009cc:	080009db 	.word	0x080009db
 80009d0:	080009d5 	.word	0x080009d5
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80009d4:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80009d8:	d1d3      	bne.n	8000982 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80009da:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 80009dc:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80009de:	6563      	str	r3, [r4, #84]	; 0x54
 80009e0:	e7e5      	b.n	80009ae <HAL_DMA_Init+0xb6>
    switch (tmp)
 80009e2:	2a02      	cmp	r2, #2
 80009e4:	d9f9      	bls.n	80009da <HAL_DMA_Init+0xe2>
 80009e6:	2a03      	cmp	r2, #3
 80009e8:	e7c8      	b.n	800097c <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 80009ea:	2001      	movs	r0, #1
 80009ec:	bd70      	pop	{r4, r5, r6, pc}
 80009ee:	bf00      	nop
 80009f0:	e010803f 	.word	0xe010803f

080009f4 <HAL_DMA_Start_IT>:
{
 80009f4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 80009f6:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 80009fa:	2c01      	cmp	r4, #1
 80009fc:	d035      	beq.n	8000a6a <HAL_DMA_Start_IT+0x76>
 80009fe:	2401      	movs	r4, #1
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a00:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8000a02:	2500      	movs	r5, #0
  __HAL_LOCK(hdma);
 8000a04:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000a08:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8000a0c:	2c01      	cmp	r4, #1
 8000a0e:	f04f 0402 	mov.w	r4, #2
 8000a12:	d128      	bne.n	8000a66 <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a14:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000a18:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a1a:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000a1c:	6825      	ldr	r5, [r4, #0]
 8000a1e:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8000a22:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8000a24:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000a26:	6883      	ldr	r3, [r0, #8]
 8000a28:	2b40      	cmp	r3, #64	; 0x40
 8000a2a:	d119      	bne.n	8000a60 <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 8000a2c:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8000a2e:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a30:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8000a32:	233f      	movs	r3, #63	; 0x3f
 8000a34:	4093      	lsls	r3, r2
 8000a36:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000a38:	6823      	ldr	r3, [r4, #0]
 8000a3a:	f043 0316 	orr.w	r3, r3, #22
 8000a3e:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000a40:	6963      	ldr	r3, [r4, #20]
 8000a42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a46:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8000a48:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000a4a:	b11b      	cbz	r3, 8000a54 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8000a4c:	6823      	ldr	r3, [r4, #0]
 8000a4e:	f043 0308 	orr.w	r3, r3, #8
 8000a52:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000a54:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000a56:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	6023      	str	r3, [r4, #0]
 8000a5e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 8000a60:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8000a62:	60e2      	str	r2, [r4, #12]
 8000a64:	e7e4      	b.n	8000a30 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 8000a66:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8000a6a:	2002      	movs	r0, #2
}
 8000a6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08000a70 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 8000a70:	2300      	movs	r3, #0
{
 8000a72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 8000a74:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a76:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 8000a78:	4b59      	ldr	r3, [pc, #356]	; (8000be0 <HAL_DMA_IRQHandler+0x170>)
{
 8000a7a:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a7c:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 8000a7e:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a80:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8000a82:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a84:	409a      	lsls	r2, r3
 8000a86:	4216      	tst	r6, r2
 8000a88:	d00c      	beq.n	8000aa4 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000a8a:	6801      	ldr	r1, [r0, #0]
 8000a8c:	6808      	ldr	r0, [r1, #0]
 8000a8e:	0740      	lsls	r0, r0, #29
 8000a90:	d508      	bpl.n	8000aa4 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000a92:	6808      	ldr	r0, [r1, #0]
 8000a94:	f020 0004 	bic.w	r0, r0, #4
 8000a98:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000a9a:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000a9c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000a9e:	f042 0201 	orr.w	r2, r2, #1
 8000aa2:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000aa4:	4a4f      	ldr	r2, [pc, #316]	; (8000be4 <HAL_DMA_IRQHandler+0x174>)
 8000aa6:	409a      	lsls	r2, r3
 8000aa8:	4216      	tst	r6, r2
 8000aaa:	d008      	beq.n	8000abe <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000aac:	6821      	ldr	r1, [r4, #0]
 8000aae:	6949      	ldr	r1, [r1, #20]
 8000ab0:	0609      	lsls	r1, r1, #24
 8000ab2:	d504      	bpl.n	8000abe <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000ab4:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000ab6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000ab8:	f042 0202 	orr.w	r2, r2, #2
 8000abc:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000abe:	4a4a      	ldr	r2, [pc, #296]	; (8000be8 <HAL_DMA_IRQHandler+0x178>)
 8000ac0:	409a      	lsls	r2, r3
 8000ac2:	4216      	tst	r6, r2
 8000ac4:	d008      	beq.n	8000ad8 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000ac6:	6821      	ldr	r1, [r4, #0]
 8000ac8:	6809      	ldr	r1, [r1, #0]
 8000aca:	0788      	lsls	r0, r1, #30
 8000acc:	d504      	bpl.n	8000ad8 <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000ace:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000ad0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000ad2:	f042 0204 	orr.w	r2, r2, #4
 8000ad6:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000ad8:	2210      	movs	r2, #16
 8000ada:	409a      	lsls	r2, r3
 8000adc:	4216      	tst	r6, r2
 8000ade:	d010      	beq.n	8000b02 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000ae0:	6823      	ldr	r3, [r4, #0]
 8000ae2:	6819      	ldr	r1, [r3, #0]
 8000ae4:	0709      	lsls	r1, r1, #28
 8000ae6:	d50c      	bpl.n	8000b02 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000ae8:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	0350      	lsls	r0, r2, #13
 8000aee:	d535      	bpl.n	8000b5c <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	0319      	lsls	r1, r3, #12
 8000af4:	d401      	bmi.n	8000afa <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8000af6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000af8:	e000      	b.n	8000afc <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000afa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8000afc:	b10b      	cbz	r3, 8000b02 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8000afe:	4620      	mov	r0, r4
 8000b00:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000b02:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000b04:	2220      	movs	r2, #32
 8000b06:	408a      	lsls	r2, r1
 8000b08:	4216      	tst	r6, r2
 8000b0a:	d038      	beq.n	8000b7e <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000b0c:	6823      	ldr	r3, [r4, #0]
 8000b0e:	6818      	ldr	r0, [r3, #0]
 8000b10:	06c6      	lsls	r6, r0, #27
 8000b12:	d534      	bpl.n	8000b7e <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000b14:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000b16:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8000b1a:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000b1c:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000b1e:	d125      	bne.n	8000b6c <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000b20:	f022 0216 	bic.w	r2, r2, #22
 8000b24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000b26:	695a      	ldr	r2, [r3, #20]
 8000b28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b2c:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000b2e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000b30:	b90a      	cbnz	r2, 8000b36 <HAL_DMA_IRQHandler+0xc6>
 8000b32:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000b34:	b11a      	cbz	r2, 8000b3e <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	f022 0208 	bic.w	r2, r2, #8
 8000b3c:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000b3e:	233f      	movs	r3, #63	; 0x3f
 8000b40:	408b      	lsls	r3, r1
 8000b42:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8000b44:	2300      	movs	r3, #0
 8000b46:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8000b50:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8000b52:	b10b      	cbz	r3, 8000b58 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8000b54:	4620      	mov	r0, r4
 8000b56:	4798      	blx	r3
}
 8000b58:	b003      	add	sp, #12
 8000b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	05d2      	lsls	r2, r2, #23
 8000b60:	d4c9      	bmi.n	8000af6 <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	f022 0208 	bic.w	r2, r2, #8
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	e7c4      	b.n	8000af6 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000b6c:	0350      	lsls	r0, r2, #13
 8000b6e:	d528      	bpl.n	8000bc2 <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	0319      	lsls	r1, r3, #12
 8000b74:	d432      	bmi.n	8000bdc <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 8000b76:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8000b78:	b10b      	cbz	r3, 8000b7e <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 8000b7a:	4620      	mov	r0, r4
 8000b7c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000b7e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d0e9      	beq.n	8000b58 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000b84:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b86:	07da      	lsls	r2, r3, #31
 8000b88:	d519      	bpl.n	8000bbe <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8000b8a:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8000b8c:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8000b8e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000b92:	6813      	ldr	r3, [r2, #0]
 8000b94:	f023 0301 	bic.w	r3, r3, #1
 8000b98:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8000b9a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000b9e:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8000ba2:	9b01      	ldr	r3, [sp, #4]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	429f      	cmp	r7, r3
 8000ba8:	9301      	str	r3, [sp, #4]
 8000baa:	d302      	bcc.n	8000bb2 <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000bac:	6813      	ldr	r3, [r2, #0]
 8000bae:	07db      	lsls	r3, r3, #31
 8000bb0:	d4f7      	bmi.n	8000ba2 <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8000bbe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000bc0:	e7c7      	b.n	8000b52 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000bc8:	d108      	bne.n	8000bdc <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000bca:	6819      	ldr	r1, [r3, #0]
 8000bcc:	f021 0110 	bic.w	r1, r1, #16
 8000bd0:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8000bd2:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8000bd4:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000bd8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8000bdc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000bde:	e7cb      	b.n	8000b78 <HAL_DMA_IRQHandler+0x108>
 8000be0:	20000000 	.word	0x20000000
 8000be4:	00800001 	.word	0x00800001
 8000be8:	00800004 	.word	0x00800004

08000bec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bf0:	680b      	ldr	r3, [r1, #0]
{
 8000bf2:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000db8 <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bf8:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000bfa:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bfc:	4a6c      	ldr	r2, [pc, #432]	; (8000db0 <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000bfe:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8000dbc <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 8000c02:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c06:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8000c08:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c0c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000c10:	45b6      	cmp	lr, r6
 8000c12:	f040 80b3 	bne.w	8000d7c <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c16:	684c      	ldr	r4, [r1, #4]
 8000c18:	f024 0710 	bic.w	r7, r4, #16
 8000c1c:	2f02      	cmp	r7, #2
 8000c1e:	d116      	bne.n	8000c4e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8000c20:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000c24:	f003 0b07 	and.w	fp, r3, #7
 8000c28:	f04f 0c0f 	mov.w	ip, #15
 8000c2c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000c30:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000c34:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000c38:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000c3c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000c40:	690d      	ldr	r5, [r1, #16]
 8000c42:	fa05 f50b 	lsl.w	r5, r5, fp
 8000c46:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8000c4a:	f8ca 5020 	str.w	r5, [sl, #32]
 8000c4e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c52:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000c54:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c58:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c5c:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c60:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c62:	fa0c fc0a 	lsl.w	ip, ip, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c66:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c68:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c6a:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c6e:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 8000c72:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c76:	d811      	bhi.n	8000c9c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000c78:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000c7a:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8000c7e:	68cf      	ldr	r7, [r1, #12]
 8000c80:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000c84:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000c88:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000c8a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c8c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000c90:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000c94:	409f      	lsls	r7, r3
 8000c96:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000c9a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000c9c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000c9e:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000ca0:	688f      	ldr	r7, [r1, #8]
 8000ca2:	fa07 f70a 	lsl.w	r7, r7, sl
 8000ca6:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000ca8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000caa:	00e5      	lsls	r5, r4, #3
 8000cac:	d566      	bpl.n	8000d7c <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cae:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8000cb2:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000cb6:	f003 0e03 	and.w	lr, r3, #3
 8000cba:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cbe:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 8000cc2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000cc6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cca:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 8000cce:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8000cd2:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8000cd6:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 8000cda:	9503      	str	r5, [sp, #12]
 8000cdc:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000cde:	fa0c f50e 	lsl.w	r5, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 8000ce2:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000ce6:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000cea:	4d32      	ldr	r5, [pc, #200]	; (8000db4 <HAL_GPIO_Init+0x1c8>)
 8000cec:	42a8      	cmp	r0, r5
 8000cee:	d04c      	beq.n	8000d8a <HAL_GPIO_Init+0x19e>
 8000cf0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000cf4:	42a8      	cmp	r0, r5
 8000cf6:	d04a      	beq.n	8000d8e <HAL_GPIO_Init+0x1a2>
 8000cf8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000cfc:	42a8      	cmp	r0, r5
 8000cfe:	d048      	beq.n	8000d92 <HAL_GPIO_Init+0x1a6>
 8000d00:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d04:	42a8      	cmp	r0, r5
 8000d06:	d046      	beq.n	8000d96 <HAL_GPIO_Init+0x1aa>
 8000d08:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d0c:	42a8      	cmp	r0, r5
 8000d0e:	d044      	beq.n	8000d9a <HAL_GPIO_Init+0x1ae>
 8000d10:	4548      	cmp	r0, r9
 8000d12:	d044      	beq.n	8000d9e <HAL_GPIO_Init+0x1b2>
 8000d14:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000d18:	42a8      	cmp	r0, r5
 8000d1a:	d042      	beq.n	8000da2 <HAL_GPIO_Init+0x1b6>
 8000d1c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d20:	42a8      	cmp	r0, r5
 8000d22:	d040      	beq.n	8000da6 <HAL_GPIO_Init+0x1ba>
 8000d24:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d28:	42a8      	cmp	r0, r5
 8000d2a:	d03e      	beq.n	8000daa <HAL_GPIO_Init+0x1be>
 8000d2c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d30:	42a8      	cmp	r0, r5
 8000d32:	bf14      	ite	ne
 8000d34:	250a      	movne	r5, #10
 8000d36:	2509      	moveq	r5, #9
 8000d38:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d3c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000d40:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000d44:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8000d46:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 8000d4a:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000d4c:	bf0c      	ite	eq
 8000d4e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000d50:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d52:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8000d56:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000d58:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000d5a:	bf0c      	ite	eq
 8000d5c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000d5e:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d60:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8000d64:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000d66:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000d68:	bf0c      	ite	eq
 8000d6a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000d6c:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d6e:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8000d70:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000d72:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000d74:	bf54      	ite	pl
 8000d76:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000d78:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000d7a:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	2b10      	cmp	r3, #16
 8000d80:	f47f af3f 	bne.w	8000c02 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000d84:	b005      	add	sp, #20
 8000d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000d8a:	2500      	movs	r5, #0
 8000d8c:	e7d4      	b.n	8000d38 <HAL_GPIO_Init+0x14c>
 8000d8e:	2501      	movs	r5, #1
 8000d90:	e7d2      	b.n	8000d38 <HAL_GPIO_Init+0x14c>
 8000d92:	2502      	movs	r5, #2
 8000d94:	e7d0      	b.n	8000d38 <HAL_GPIO_Init+0x14c>
 8000d96:	2503      	movs	r5, #3
 8000d98:	e7ce      	b.n	8000d38 <HAL_GPIO_Init+0x14c>
 8000d9a:	2504      	movs	r5, #4
 8000d9c:	e7cc      	b.n	8000d38 <HAL_GPIO_Init+0x14c>
 8000d9e:	2505      	movs	r5, #5
 8000da0:	e7ca      	b.n	8000d38 <HAL_GPIO_Init+0x14c>
 8000da2:	2506      	movs	r5, #6
 8000da4:	e7c8      	b.n	8000d38 <HAL_GPIO_Init+0x14c>
 8000da6:	2507      	movs	r5, #7
 8000da8:	e7c6      	b.n	8000d38 <HAL_GPIO_Init+0x14c>
 8000daa:	2508      	movs	r5, #8
 8000dac:	e7c4      	b.n	8000d38 <HAL_GPIO_Init+0x14c>
 8000dae:	bf00      	nop
 8000db0:	40013c00 	.word	0x40013c00
 8000db4:	40020000 	.word	0x40020000
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40021400 	.word	0x40021400

08000dc0 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000dc0:	6943      	ldr	r3, [r0, #20]
 8000dc2:	4059      	eors	r1, r3
 8000dc4:	6141      	str	r1, [r0, #20]
 8000dc6:	4770      	bx	lr

08000dc8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dc8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dcc:	4604      	mov	r4, r0
 8000dce:	b918      	cbnz	r0, 8000dd8 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000dd0:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000dd2:	b002      	add	sp, #8
 8000dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dd8:	6803      	ldr	r3, [r0, #0]
 8000dda:	07d8      	lsls	r0, r3, #31
 8000ddc:	d410      	bmi.n	8000e00 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dde:	6823      	ldr	r3, [r4, #0]
 8000de0:	0799      	lsls	r1, r3, #30
 8000de2:	d45e      	bmi.n	8000ea2 <HAL_RCC_OscConfig+0xda>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000de4:	6823      	ldr	r3, [r4, #0]
 8000de6:	0719      	lsls	r1, r3, #28
 8000de8:	f100 80a3 	bmi.w	8000f32 <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dec:	6823      	ldr	r3, [r4, #0]
 8000dee:	075a      	lsls	r2, r3, #29
 8000df0:	f100 80c4 	bmi.w	8000f7c <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000df4:	69a2      	ldr	r2, [r4, #24]
 8000df6:	2a00      	cmp	r2, #0
 8000df8:	f040 812e 	bne.w	8001058 <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	e7e8      	b.n	8000dd2 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e00:	4b93      	ldr	r3, [pc, #588]	; (8001050 <HAL_RCC_OscConfig+0x288>)
 8000e02:	689a      	ldr	r2, [r3, #8]
 8000e04:	f002 020c 	and.w	r2, r2, #12
 8000e08:	2a04      	cmp	r2, #4
 8000e0a:	d007      	beq.n	8000e1c <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e0c:	689a      	ldr	r2, [r3, #8]
 8000e0e:	f002 020c 	and.w	r2, r2, #12
 8000e12:	2a08      	cmp	r2, #8
 8000e14:	d10a      	bne.n	8000e2c <HAL_RCC_OscConfig+0x64>
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	025a      	lsls	r2, r3, #9
 8000e1a:	d507      	bpl.n	8000e2c <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e1c:	4b8c      	ldr	r3, [pc, #560]	; (8001050 <HAL_RCC_OscConfig+0x288>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	039b      	lsls	r3, r3, #14
 8000e22:	d5dc      	bpl.n	8000dde <HAL_RCC_OscConfig+0x16>
 8000e24:	6863      	ldr	r3, [r4, #4]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d1d9      	bne.n	8000dde <HAL_RCC_OscConfig+0x16>
 8000e2a:	e7d1      	b.n	8000dd0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e2c:	6863      	ldr	r3, [r4, #4]
 8000e2e:	4d88      	ldr	r5, [pc, #544]	; (8001050 <HAL_RCC_OscConfig+0x288>)
 8000e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e34:	d111      	bne.n	8000e5a <HAL_RCC_OscConfig+0x92>
 8000e36:	682b      	ldr	r3, [r5, #0]
 8000e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e3c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e3e:	f7ff fa23 	bl	8000288 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e42:	4d83      	ldr	r5, [pc, #524]	; (8001050 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8000e44:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e46:	682b      	ldr	r3, [r5, #0]
 8000e48:	039f      	lsls	r7, r3, #14
 8000e4a:	d4c8      	bmi.n	8000dde <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e4c:	f7ff fa1c 	bl	8000288 <HAL_GetTick>
 8000e50:	1b80      	subs	r0, r0, r6
 8000e52:	2864      	cmp	r0, #100	; 0x64
 8000e54:	d9f7      	bls.n	8000e46 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8000e56:	2003      	movs	r0, #3
 8000e58:	e7bb      	b.n	8000dd2 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e5a:	b99b      	cbnz	r3, 8000e84 <HAL_RCC_OscConfig+0xbc>
 8000e5c:	682b      	ldr	r3, [r5, #0]
 8000e5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e62:	602b      	str	r3, [r5, #0]
 8000e64:	682b      	ldr	r3, [r5, #0]
 8000e66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e6a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e6c:	f7ff fa0c 	bl	8000288 <HAL_GetTick>
 8000e70:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e72:	682b      	ldr	r3, [r5, #0]
 8000e74:	0398      	lsls	r0, r3, #14
 8000e76:	d5b2      	bpl.n	8000dde <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e78:	f7ff fa06 	bl	8000288 <HAL_GetTick>
 8000e7c:	1b80      	subs	r0, r0, r6
 8000e7e:	2864      	cmp	r0, #100	; 0x64
 8000e80:	d9f7      	bls.n	8000e72 <HAL_RCC_OscConfig+0xaa>
 8000e82:	e7e8      	b.n	8000e56 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e88:	682b      	ldr	r3, [r5, #0]
 8000e8a:	d103      	bne.n	8000e94 <HAL_RCC_OscConfig+0xcc>
 8000e8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e90:	602b      	str	r3, [r5, #0]
 8000e92:	e7d0      	b.n	8000e36 <HAL_RCC_OscConfig+0x6e>
 8000e94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e98:	602b      	str	r3, [r5, #0]
 8000e9a:	682b      	ldr	r3, [r5, #0]
 8000e9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ea0:	e7cc      	b.n	8000e3c <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ea2:	4b6b      	ldr	r3, [pc, #428]	; (8001050 <HAL_RCC_OscConfig+0x288>)
 8000ea4:	689a      	ldr	r2, [r3, #8]
 8000ea6:	f012 0f0c 	tst.w	r2, #12
 8000eaa:	d007      	beq.n	8000ebc <HAL_RCC_OscConfig+0xf4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000eac:	689a      	ldr	r2, [r3, #8]
 8000eae:	f002 020c 	and.w	r2, r2, #12
 8000eb2:	2a08      	cmp	r2, #8
 8000eb4:	d111      	bne.n	8000eda <HAL_RCC_OscConfig+0x112>
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	0259      	lsls	r1, r3, #9
 8000eba:	d40e      	bmi.n	8000eda <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ebc:	4b64      	ldr	r3, [pc, #400]	; (8001050 <HAL_RCC_OscConfig+0x288>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	0792      	lsls	r2, r2, #30
 8000ec2:	d502      	bpl.n	8000eca <HAL_RCC_OscConfig+0x102>
 8000ec4:	68e2      	ldr	r2, [r4, #12]
 8000ec6:	2a01      	cmp	r2, #1
 8000ec8:	d182      	bne.n	8000dd0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	6921      	ldr	r1, [r4, #16]
 8000ece:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000ed2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000ed6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ed8:	e784      	b.n	8000de4 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000eda:	68e3      	ldr	r3, [r4, #12]
 8000edc:	4d5c      	ldr	r5, [pc, #368]	; (8001050 <HAL_RCC_OscConfig+0x288>)
 8000ede:	b1bb      	cbz	r3, 8000f10 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8000ee0:	682b      	ldr	r3, [r5, #0]
 8000ee2:	f043 0301 	orr.w	r3, r3, #1
 8000ee6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000ee8:	f7ff f9ce 	bl	8000288 <HAL_GetTick>
 8000eec:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eee:	682b      	ldr	r3, [r5, #0]
 8000ef0:	079f      	lsls	r7, r3, #30
 8000ef2:	d507      	bpl.n	8000f04 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ef4:	682b      	ldr	r3, [r5, #0]
 8000ef6:	6922      	ldr	r2, [r4, #16]
 8000ef8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000efc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000f00:	602b      	str	r3, [r5, #0]
 8000f02:	e76f      	b.n	8000de4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f04:	f7ff f9c0 	bl	8000288 <HAL_GetTick>
 8000f08:	1b80      	subs	r0, r0, r6
 8000f0a:	2802      	cmp	r0, #2
 8000f0c:	d9ef      	bls.n	8000eee <HAL_RCC_OscConfig+0x126>
 8000f0e:	e7a2      	b.n	8000e56 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000f10:	682b      	ldr	r3, [r5, #0]
 8000f12:	f023 0301 	bic.w	r3, r3, #1
 8000f16:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f18:	f7ff f9b6 	bl	8000288 <HAL_GetTick>
 8000f1c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f1e:	682b      	ldr	r3, [r5, #0]
 8000f20:	0798      	lsls	r0, r3, #30
 8000f22:	f57f af5f 	bpl.w	8000de4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f26:	f7ff f9af 	bl	8000288 <HAL_GetTick>
 8000f2a:	1b80      	subs	r0, r0, r6
 8000f2c:	2802      	cmp	r0, #2
 8000f2e:	d9f6      	bls.n	8000f1e <HAL_RCC_OscConfig+0x156>
 8000f30:	e791      	b.n	8000e56 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000f32:	6963      	ldr	r3, [r4, #20]
 8000f34:	4d46      	ldr	r5, [pc, #280]	; (8001050 <HAL_RCC_OscConfig+0x288>)
 8000f36:	b183      	cbz	r3, 8000f5a <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8000f38:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000f3a:	f043 0301 	orr.w	r3, r3, #1
 8000f3e:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000f40:	f7ff f9a2 	bl	8000288 <HAL_GetTick>
 8000f44:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f46:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000f48:	079b      	lsls	r3, r3, #30
 8000f4a:	f53f af4f 	bmi.w	8000dec <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f4e:	f7ff f99b 	bl	8000288 <HAL_GetTick>
 8000f52:	1b80      	subs	r0, r0, r6
 8000f54:	2802      	cmp	r0, #2
 8000f56:	d9f6      	bls.n	8000f46 <HAL_RCC_OscConfig+0x17e>
 8000f58:	e77d      	b.n	8000e56 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000f5a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000f5c:	f023 0301 	bic.w	r3, r3, #1
 8000f60:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000f62:	f7ff f991 	bl	8000288 <HAL_GetTick>
 8000f66:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f68:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000f6a:	079f      	lsls	r7, r3, #30
 8000f6c:	f57f af3e 	bpl.w	8000dec <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f70:	f7ff f98a 	bl	8000288 <HAL_GetTick>
 8000f74:	1b80      	subs	r0, r0, r6
 8000f76:	2802      	cmp	r0, #2
 8000f78:	d9f6      	bls.n	8000f68 <HAL_RCC_OscConfig+0x1a0>
 8000f7a:	e76c      	b.n	8000e56 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f7c:	4b34      	ldr	r3, [pc, #208]	; (8001050 <HAL_RCC_OscConfig+0x288>)
 8000f7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f80:	00d0      	lsls	r0, r2, #3
 8000f82:	d427      	bmi.n	8000fd4 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8000f86:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f88:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f8c:	641a      	str	r2, [r3, #64]	; 0x40
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f94:	9301      	str	r3, [sp, #4]
 8000f96:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f98:	4d2e      	ldr	r5, [pc, #184]	; (8001054 <HAL_RCC_OscConfig+0x28c>)
 8000f9a:	682b      	ldr	r3, [r5, #0]
 8000f9c:	05d9      	lsls	r1, r3, #23
 8000f9e:	d51b      	bpl.n	8000fd8 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fa0:	68a3      	ldr	r3, [r4, #8]
 8000fa2:	4d2b      	ldr	r5, [pc, #172]	; (8001050 <HAL_RCC_OscConfig+0x288>)
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d127      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x230>
 8000fa8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000faa:	f043 0301 	orr.w	r3, r3, #1
 8000fae:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fb0:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000fb4:	f7ff f968 	bl	8000288 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fb8:	4f25      	ldr	r7, [pc, #148]	; (8001050 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8000fba:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000fbe:	079b      	lsls	r3, r3, #30
 8000fc0:	d53f      	bpl.n	8001042 <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 8000fc2:	2e00      	cmp	r6, #0
 8000fc4:	f43f af16 	beq.w	8000df4 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fc8:	4a21      	ldr	r2, [pc, #132]	; (8001050 <HAL_RCC_OscConfig+0x288>)
 8000fca:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000fcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd2:	e70f      	b.n	8000df4 <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 8000fd4:	2600      	movs	r6, #0
 8000fd6:	e7df      	b.n	8000f98 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 8000fd8:	682b      	ldr	r3, [r5, #0]
 8000fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fde:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000fe0:	f7ff f952 	bl	8000288 <HAL_GetTick>
 8000fe4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fe6:	682b      	ldr	r3, [r5, #0]
 8000fe8:	05da      	lsls	r2, r3, #23
 8000fea:	d4d9      	bmi.n	8000fa0 <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000fec:	f7ff f94c 	bl	8000288 <HAL_GetTick>
 8000ff0:	1bc0      	subs	r0, r0, r7
 8000ff2:	2864      	cmp	r0, #100	; 0x64
 8000ff4:	d9f7      	bls.n	8000fe6 <HAL_RCC_OscConfig+0x21e>
 8000ff6:	e72e      	b.n	8000e56 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ff8:	b9ab      	cbnz	r3, 8001026 <HAL_RCC_OscConfig+0x25e>
 8000ffa:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ffc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001000:	f023 0301 	bic.w	r3, r3, #1
 8001004:	672b      	str	r3, [r5, #112]	; 0x70
 8001006:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001008:	f023 0304 	bic.w	r3, r3, #4
 800100c:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800100e:	f7ff f93b 	bl	8000288 <HAL_GetTick>
 8001012:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001014:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001016:	0798      	lsls	r0, r3, #30
 8001018:	d5d3      	bpl.n	8000fc2 <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800101a:	f7ff f935 	bl	8000288 <HAL_GetTick>
 800101e:	1bc0      	subs	r0, r0, r7
 8001020:	4540      	cmp	r0, r8
 8001022:	d9f7      	bls.n	8001014 <HAL_RCC_OscConfig+0x24c>
 8001024:	e717      	b.n	8000e56 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001026:	2b05      	cmp	r3, #5
 8001028:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800102a:	d103      	bne.n	8001034 <HAL_RCC_OscConfig+0x26c>
 800102c:	f043 0304 	orr.w	r3, r3, #4
 8001030:	672b      	str	r3, [r5, #112]	; 0x70
 8001032:	e7b9      	b.n	8000fa8 <HAL_RCC_OscConfig+0x1e0>
 8001034:	f023 0301 	bic.w	r3, r3, #1
 8001038:	672b      	str	r3, [r5, #112]	; 0x70
 800103a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800103c:	f023 0304 	bic.w	r3, r3, #4
 8001040:	e7b5      	b.n	8000fae <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001042:	f7ff f921 	bl	8000288 <HAL_GetTick>
 8001046:	eba0 0008 	sub.w	r0, r0, r8
 800104a:	42a8      	cmp	r0, r5
 800104c:	d9b6      	bls.n	8000fbc <HAL_RCC_OscConfig+0x1f4>
 800104e:	e702      	b.n	8000e56 <HAL_RCC_OscConfig+0x8e>
 8001050:	40023800 	.word	0x40023800
 8001054:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001058:	4d24      	ldr	r5, [pc, #144]	; (80010ec <HAL_RCC_OscConfig+0x324>)
 800105a:	68ab      	ldr	r3, [r5, #8]
 800105c:	f003 030c 	and.w	r3, r3, #12
 8001060:	2b08      	cmp	r3, #8
 8001062:	f43f aeb5 	beq.w	8000dd0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8001066:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001068:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800106a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800106e:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001070:	d12f      	bne.n	80010d2 <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 8001072:	f7ff f909 	bl	8000288 <HAL_GetTick>
 8001076:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001078:	682b      	ldr	r3, [r5, #0]
 800107a:	0199      	lsls	r1, r3, #6
 800107c:	d423      	bmi.n	80010c6 <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800107e:	6a22      	ldr	r2, [r4, #32]
 8001080:	69e3      	ldr	r3, [r4, #28]
 8001082:	4313      	orrs	r3, r2
 8001084:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001086:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800108a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800108c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001090:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001092:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001096:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001098:	4c14      	ldr	r4, [pc, #80]	; (80010ec <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800109a:	0852      	lsrs	r2, r2, #1
 800109c:	3a01      	subs	r2, #1
 800109e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80010a2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80010a4:	682b      	ldr	r3, [r5, #0]
 80010a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010aa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80010ac:	f7ff f8ec 	bl	8000288 <HAL_GetTick>
 80010b0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010b2:	6823      	ldr	r3, [r4, #0]
 80010b4:	019a      	lsls	r2, r3, #6
 80010b6:	f53f aea1 	bmi.w	8000dfc <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010ba:	f7ff f8e5 	bl	8000288 <HAL_GetTick>
 80010be:	1b40      	subs	r0, r0, r5
 80010c0:	2802      	cmp	r0, #2
 80010c2:	d9f6      	bls.n	80010b2 <HAL_RCC_OscConfig+0x2ea>
 80010c4:	e6c7      	b.n	8000e56 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010c6:	f7ff f8df 	bl	8000288 <HAL_GetTick>
 80010ca:	1b80      	subs	r0, r0, r6
 80010cc:	2802      	cmp	r0, #2
 80010ce:	d9d3      	bls.n	8001078 <HAL_RCC_OscConfig+0x2b0>
 80010d0:	e6c1      	b.n	8000e56 <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 80010d2:	f7ff f8d9 	bl	8000288 <HAL_GetTick>
 80010d6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010d8:	682b      	ldr	r3, [r5, #0]
 80010da:	019b      	lsls	r3, r3, #6
 80010dc:	f57f ae8e 	bpl.w	8000dfc <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010e0:	f7ff f8d2 	bl	8000288 <HAL_GetTick>
 80010e4:	1b00      	subs	r0, r0, r4
 80010e6:	2802      	cmp	r0, #2
 80010e8:	d9f6      	bls.n	80010d8 <HAL_RCC_OscConfig+0x310>
 80010ea:	e6b4      	b.n	8000e56 <HAL_RCC_OscConfig+0x8e>
 80010ec:	40023800 	.word	0x40023800

080010f0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80010f0:	4b11      	ldr	r3, [pc, #68]	; (8001138 <HAL_RCC_GetSysClockFreq+0x48>)
 80010f2:	689a      	ldr	r2, [r3, #8]
 80010f4:	f002 020c 	and.w	r2, r2, #12
 80010f8:	2a04      	cmp	r2, #4
 80010fa:	d003      	beq.n	8001104 <HAL_RCC_GetSysClockFreq+0x14>
 80010fc:	2a08      	cmp	r2, #8
 80010fe:	d003      	beq.n	8001108 <HAL_RCC_GetSysClockFreq+0x18>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001100:	480e      	ldr	r0, [pc, #56]	; (800113c <HAL_RCC_GetSysClockFreq+0x4c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001102:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8001104:	480e      	ldr	r0, [pc, #56]	; (8001140 <HAL_RCC_GetSysClockFreq+0x50>)
 8001106:	4770      	bx	lr
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001108:	685a      	ldr	r2, [r3, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800110a:	6859      	ldr	r1, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800110c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos));
 8001110:	685b      	ldr	r3, [r3, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001112:	0249      	lsls	r1, r1, #9
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos));
 8001114:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001118:	bf4c      	ite	mi
 800111a:	4809      	ldrmi	r0, [pc, #36]	; (8001140 <HAL_RCC_GetSysClockFreq+0x50>)
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos));
 800111c:	4807      	ldrpl	r0, [pc, #28]	; (800113c <HAL_RCC_GetSysClockFreq+0x4c>)
 800111e:	fbb0 f0f2 	udiv	r0, r0, r2
 8001122:	4358      	muls	r0, r3
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8001124:	4b04      	ldr	r3, [pc, #16]	; (8001138 <HAL_RCC_GetSysClockFreq+0x48>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800112c:	3301      	adds	r3, #1
 800112e:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001130:	fbb0 f0f3 	udiv	r0, r0, r3
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	40023800 	.word	0x40023800
 800113c:	00f42400 	.word	0x00f42400
 8001140:	017d7840 	.word	0x017d7840

08001144 <HAL_RCC_ClockConfig>:
{
 8001144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001148:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800114a:	4604      	mov	r4, r0
 800114c:	b910      	cbnz	r0, 8001154 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800114e:	2001      	movs	r0, #1
 8001150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001154:	4a3f      	ldr	r2, [pc, #252]	; (8001254 <HAL_RCC_ClockConfig+0x110>)
 8001156:	6813      	ldr	r3, [r2, #0]
 8001158:	f003 030f 	and.w	r3, r3, #15
 800115c:	428b      	cmp	r3, r1
 800115e:	d328      	bcc.n	80011b2 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001160:	6822      	ldr	r2, [r4, #0]
 8001162:	0796      	lsls	r6, r2, #30
 8001164:	d430      	bmi.n	80011c8 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001166:	07d0      	lsls	r0, r2, #31
 8001168:	d436      	bmi.n	80011d8 <HAL_RCC_ClockConfig+0x94>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800116a:	4a3a      	ldr	r2, [pc, #232]	; (8001254 <HAL_RCC_ClockConfig+0x110>)
 800116c:	6813      	ldr	r3, [r2, #0]
 800116e:	f003 030f 	and.w	r3, r3, #15
 8001172:	429d      	cmp	r5, r3
 8001174:	d35a      	bcc.n	800122c <HAL_RCC_ClockConfig+0xe8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001176:	6822      	ldr	r2, [r4, #0]
 8001178:	0751      	lsls	r1, r2, #29
 800117a:	d462      	bmi.n	8001242 <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800117c:	0713      	lsls	r3, r2, #28
 800117e:	d507      	bpl.n	8001190 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001180:	4a35      	ldr	r2, [pc, #212]	; (8001258 <HAL_RCC_ClockConfig+0x114>)
 8001182:	6921      	ldr	r1, [r4, #16]
 8001184:	6893      	ldr	r3, [r2, #8]
 8001186:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800118a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800118e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001190:	f7ff ffae 	bl	80010f0 <HAL_RCC_GetSysClockFreq>
 8001194:	4b30      	ldr	r3, [pc, #192]	; (8001258 <HAL_RCC_ClockConfig+0x114>)
 8001196:	4a31      	ldr	r2, [pc, #196]	; (800125c <HAL_RCC_ClockConfig+0x118>)
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800119e:	5cd3      	ldrb	r3, [r2, r3]
 80011a0:	40d8      	lsrs	r0, r3
 80011a2:	4b2f      	ldr	r3, [pc, #188]	; (8001260 <HAL_RCC_ClockConfig+0x11c>)
 80011a4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80011a6:	2000      	movs	r0, #0
 80011a8:	f7ff f846 	bl	8000238 <HAL_InitTick>
  return HAL_OK;
 80011ac:	2000      	movs	r0, #0
 80011ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011b2:	6813      	ldr	r3, [r2, #0]
 80011b4:	f023 030f 	bic.w	r3, r3, #15
 80011b8:	430b      	orrs	r3, r1
 80011ba:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011bc:	6813      	ldr	r3, [r2, #0]
 80011be:	f003 030f 	and.w	r3, r3, #15
 80011c2:	4299      	cmp	r1, r3
 80011c4:	d1c3      	bne.n	800114e <HAL_RCC_ClockConfig+0xa>
 80011c6:	e7cb      	b.n	8001160 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011c8:	4923      	ldr	r1, [pc, #140]	; (8001258 <HAL_RCC_ClockConfig+0x114>)
 80011ca:	68a0      	ldr	r0, [r4, #8]
 80011cc:	688b      	ldr	r3, [r1, #8]
 80011ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80011d2:	4303      	orrs	r3, r0
 80011d4:	608b      	str	r3, [r1, #8]
 80011d6:	e7c6      	b.n	8001166 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011d8:	6861      	ldr	r1, [r4, #4]
 80011da:	4b1f      	ldr	r3, [pc, #124]	; (8001258 <HAL_RCC_ClockConfig+0x114>)
 80011dc:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011de:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011e0:	d11c      	bne.n	800121c <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011e2:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e6:	d0b2      	beq.n	800114e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011e8:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011ea:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ee:	4e1a      	ldr	r6, [pc, #104]	; (8001258 <HAL_RCC_ClockConfig+0x114>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011f0:	f022 0203 	bic.w	r2, r2, #3
 80011f4:	430a      	orrs	r2, r1
 80011f6:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80011f8:	f7ff f846 	bl	8000288 <HAL_GetTick>
 80011fc:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011fe:	68b3      	ldr	r3, [r6, #8]
 8001200:	6862      	ldr	r2, [r4, #4]
 8001202:	f003 030c 	and.w	r3, r3, #12
 8001206:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800120a:	d0ae      	beq.n	800116a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800120c:	f7ff f83c 	bl	8000288 <HAL_GetTick>
 8001210:	1bc0      	subs	r0, r0, r7
 8001212:	4540      	cmp	r0, r8
 8001214:	d9f3      	bls.n	80011fe <HAL_RCC_ClockConfig+0xba>
        return HAL_TIMEOUT;
 8001216:	2003      	movs	r0, #3
}
 8001218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800121c:	2902      	cmp	r1, #2
 800121e:	d102      	bne.n	8001226 <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001220:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001224:	e7df      	b.n	80011e6 <HAL_RCC_ClockConfig+0xa2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001226:	f012 0f02 	tst.w	r2, #2
 800122a:	e7dc      	b.n	80011e6 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800122c:	6813      	ldr	r3, [r2, #0]
 800122e:	f023 030f 	bic.w	r3, r3, #15
 8001232:	432b      	orrs	r3, r5
 8001234:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001236:	6813      	ldr	r3, [r2, #0]
 8001238:	f003 030f 	and.w	r3, r3, #15
 800123c:	429d      	cmp	r5, r3
 800123e:	d186      	bne.n	800114e <HAL_RCC_ClockConfig+0xa>
 8001240:	e799      	b.n	8001176 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001242:	4905      	ldr	r1, [pc, #20]	; (8001258 <HAL_RCC_ClockConfig+0x114>)
 8001244:	68e0      	ldr	r0, [r4, #12]
 8001246:	688b      	ldr	r3, [r1, #8]
 8001248:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800124c:	4303      	orrs	r3, r0
 800124e:	608b      	str	r3, [r1, #8]
 8001250:	e794      	b.n	800117c <HAL_RCC_ClockConfig+0x38>
 8001252:	bf00      	nop
 8001254:	40023c00 	.word	0x40023c00
 8001258:	40023800 	.word	0x40023800
 800125c:	08001f43 	.word	0x08001f43
 8001260:	20000000 	.word	0x20000000

08001264 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001264:	4b01      	ldr	r3, [pc, #4]	; (800126c <HAL_RCC_GetHCLKFreq+0x8>)
 8001266:	6818      	ldr	r0, [r3, #0]
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	20000000 	.word	0x20000000

08001270 <HAL_TIM_Base_Start>:
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001270:	6802      	ldr	r2, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001272:	2302      	movs	r3, #2
 8001274:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE(htim);
 8001278:	6813      	ldr	r3, [r2, #0]
 800127a:	f043 0301 	orr.w	r3, r3, #1
 800127e:	6013      	str	r3, [r2, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001280:	2301      	movs	r3, #1
 8001282:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  
  /* Return function status */
  return HAL_OK;
}
 8001286:	2000      	movs	r0, #0
 8001288:	4770      	bx	lr

0800128a <HAL_TIM_PeriodElapsedCallback>:
 800128a:	4770      	bx	lr

0800128c <HAL_TIM_OC_DelayElapsedCallback>:
 800128c:	4770      	bx	lr

0800128e <HAL_TIM_IC_CaptureCallback>:
 800128e:	4770      	bx	lr

08001290 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001290:	4770      	bx	lr

08001292 <HAL_TIM_TriggerCallback>:
 8001292:	4770      	bx	lr

08001294 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001294:	6803      	ldr	r3, [r0, #0]
 8001296:	691a      	ldr	r2, [r3, #16]
 8001298:	0791      	lsls	r1, r2, #30
{
 800129a:	b510      	push	{r4, lr}
 800129c:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800129e:	d50f      	bpl.n	80012c0 <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80012a0:	68da      	ldr	r2, [r3, #12]
 80012a2:	0792      	lsls	r2, r2, #30
 80012a4:	d50c      	bpl.n	80012c0 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80012a6:	f06f 0202 	mvn.w	r2, #2
 80012aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80012ac:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 80012ae:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80012b0:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 80012b2:	0799      	lsls	r1, r3, #30
 80012b4:	f000 8085 	beq.w	80013c2 <HAL_TIM_IRQHandler+0x12e>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80012b8:	f7ff ffe9 	bl	800128e <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012bc:	2300      	movs	r3, #0
 80012be:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80012c0:	6823      	ldr	r3, [r4, #0]
 80012c2:	691a      	ldr	r2, [r3, #16]
 80012c4:	0752      	lsls	r2, r2, #29
 80012c6:	d510      	bpl.n	80012ea <HAL_TIM_IRQHandler+0x56>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80012c8:	68da      	ldr	r2, [r3, #12]
 80012ca:	0750      	lsls	r0, r2, #29
 80012cc:	d50d      	bpl.n	80012ea <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80012ce:	f06f 0204 	mvn.w	r2, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80012d2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80012d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80012d6:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80012d8:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80012da:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80012dc:	f413 7f40 	tst.w	r3, #768	; 0x300
 80012e0:	d075      	beq.n	80013ce <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80012e2:	f7ff ffd4 	bl	800128e <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012e6:	2300      	movs	r3, #0
 80012e8:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80012ea:	6823      	ldr	r3, [r4, #0]
 80012ec:	691a      	ldr	r2, [r3, #16]
 80012ee:	0711      	lsls	r1, r2, #28
 80012f0:	d50f      	bpl.n	8001312 <HAL_TIM_IRQHandler+0x7e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80012f2:	68da      	ldr	r2, [r3, #12]
 80012f4:	0712      	lsls	r2, r2, #28
 80012f6:	d50c      	bpl.n	8001312 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80012f8:	f06f 0208 	mvn.w	r2, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80012fc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80012fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001300:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8001302:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001304:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8001306:	079b      	lsls	r3, r3, #30
 8001308:	d067      	beq.n	80013da <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800130a:	f7ff ffc0 	bl	800128e <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800130e:	2300      	movs	r3, #0
 8001310:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001312:	6823      	ldr	r3, [r4, #0]
 8001314:	691a      	ldr	r2, [r3, #16]
 8001316:	06d0      	lsls	r0, r2, #27
 8001318:	d510      	bpl.n	800133c <HAL_TIM_IRQHandler+0xa8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800131a:	68da      	ldr	r2, [r3, #12]
 800131c:	06d1      	lsls	r1, r2, #27
 800131e:	d50d      	bpl.n	800133c <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001320:	f06f 0210 	mvn.w	r2, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001324:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001326:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001328:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 800132a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800132c:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 800132e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001332:	d058      	beq.n	80013e6 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8001334:	f7ff ffab 	bl	800128e <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001338:	2300      	movs	r3, #0
 800133a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800133c:	6823      	ldr	r3, [r4, #0]
 800133e:	691a      	ldr	r2, [r3, #16]
 8001340:	07d2      	lsls	r2, r2, #31
 8001342:	d508      	bpl.n	8001356 <HAL_TIM_IRQHandler+0xc2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001344:	68da      	ldr	r2, [r3, #12]
 8001346:	07d0      	lsls	r0, r2, #31
 8001348:	d505      	bpl.n	8001356 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800134a:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800134e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001350:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001352:	f7ff ff9a 	bl	800128a <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001356:	6823      	ldr	r3, [r4, #0]
 8001358:	691a      	ldr	r2, [r3, #16]
 800135a:	0611      	lsls	r1, r2, #24
 800135c:	d508      	bpl.n	8001370 <HAL_TIM_IRQHandler+0xdc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800135e:	68da      	ldr	r2, [r3, #12]
 8001360:	0612      	lsls	r2, r2, #24
 8001362:	d505      	bpl.n	8001370 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001364:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8001368:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800136a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800136c:	f000 f8eb 	bl	8001546 <HAL_TIMEx_BreakCallback>
    }
  }
  
    /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001370:	6823      	ldr	r3, [r4, #0]
 8001372:	691a      	ldr	r2, [r3, #16]
 8001374:	05d0      	lsls	r0, r2, #23
 8001376:	d508      	bpl.n	800138a <HAL_TIM_IRQHandler+0xf6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001378:	68da      	ldr	r2, [r3, #12]
 800137a:	0611      	lsls	r1, r2, #24
 800137c:	d505      	bpl.n	800138a <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800137e:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8001382:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001384:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001386:	f000 f8de 	bl	8001546 <HAL_TIMEx_BreakCallback>
    }
  }

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800138a:	6823      	ldr	r3, [r4, #0]
 800138c:	691a      	ldr	r2, [r3, #16]
 800138e:	0652      	lsls	r2, r2, #25
 8001390:	d508      	bpl.n	80013a4 <HAL_TIM_IRQHandler+0x110>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001392:	68da      	ldr	r2, [r3, #12]
 8001394:	0650      	lsls	r0, r2, #25
 8001396:	d505      	bpl.n	80013a4 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001398:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800139c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800139e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80013a0:	f7ff ff77 	bl	8001292 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80013a4:	6823      	ldr	r3, [r4, #0]
 80013a6:	691a      	ldr	r2, [r3, #16]
 80013a8:	0691      	lsls	r1, r2, #26
 80013aa:	d522      	bpl.n	80013f2 <HAL_TIM_IRQHandler+0x15e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80013ac:	68da      	ldr	r2, [r3, #12]
 80013ae:	0692      	lsls	r2, r2, #26
 80013b0:	d51f      	bpl.n	80013f2 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80013b2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80013b6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80013b8:	611a      	str	r2, [r3, #16]
    }
  }
}
 80013ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80013be:	f000 b8c1 	b.w	8001544 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80013c2:	f7ff ff63 	bl	800128c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013c6:	4620      	mov	r0, r4
 80013c8:	f7ff ff62 	bl	8001290 <HAL_TIM_PWM_PulseFinishedCallback>
 80013cc:	e776      	b.n	80012bc <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80013ce:	f7ff ff5d 	bl	800128c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013d2:	4620      	mov	r0, r4
 80013d4:	f7ff ff5c 	bl	8001290 <HAL_TIM_PWM_PulseFinishedCallback>
 80013d8:	e785      	b.n	80012e6 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80013da:	f7ff ff57 	bl	800128c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80013de:	4620      	mov	r0, r4
 80013e0:	f7ff ff56 	bl	8001290 <HAL_TIM_PWM_PulseFinishedCallback>
 80013e4:	e793      	b.n	800130e <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80013e6:	f7ff ff51 	bl	800128c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013ea:	4620      	mov	r0, r4
 80013ec:	f7ff ff50 	bl	8001290 <HAL_TIM_PWM_PulseFinishedCallback>
 80013f0:	e7a2      	b.n	8001338 <HAL_TIM_IRQHandler+0xa4>
 80013f2:	bd10      	pop	{r4, pc}

080013f4 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80013f4:	4a30      	ldr	r2, [pc, #192]	; (80014b8 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80013f6:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80013f8:	4290      	cmp	r0, r2
 80013fa:	d012      	beq.n	8001422 <TIM_Base_SetConfig+0x2e>
 80013fc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001400:	d00f      	beq.n	8001422 <TIM_Base_SetConfig+0x2e>
 8001402:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001406:	4290      	cmp	r0, r2
 8001408:	d00b      	beq.n	8001422 <TIM_Base_SetConfig+0x2e>
 800140a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800140e:	4290      	cmp	r0, r2
 8001410:	d007      	beq.n	8001422 <TIM_Base_SetConfig+0x2e>
 8001412:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001416:	4290      	cmp	r0, r2
 8001418:	d003      	beq.n	8001422 <TIM_Base_SetConfig+0x2e>
 800141a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800141e:	4290      	cmp	r0, r2
 8001420:	d11d      	bne.n	800145e <TIM_Base_SetConfig+0x6a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001422:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001428:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800142a:	4a23      	ldr	r2, [pc, #140]	; (80014b8 <TIM_Base_SetConfig+0xc4>)
 800142c:	4290      	cmp	r0, r2
 800142e:	d104      	bne.n	800143a <TIM_Base_SetConfig+0x46>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001434:	68ca      	ldr	r2, [r1, #12]
 8001436:	4313      	orrs	r3, r2
 8001438:	e028      	b.n	800148c <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800143a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800143e:	d0f7      	beq.n	8001430 <TIM_Base_SetConfig+0x3c>
 8001440:	4a1e      	ldr	r2, [pc, #120]	; (80014bc <TIM_Base_SetConfig+0xc8>)
 8001442:	4290      	cmp	r0, r2
 8001444:	d0f4      	beq.n	8001430 <TIM_Base_SetConfig+0x3c>
 8001446:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800144a:	4290      	cmp	r0, r2
 800144c:	d0f0      	beq.n	8001430 <TIM_Base_SetConfig+0x3c>
 800144e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001452:	4290      	cmp	r0, r2
 8001454:	d0ec      	beq.n	8001430 <TIM_Base_SetConfig+0x3c>
 8001456:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800145a:	4290      	cmp	r0, r2
 800145c:	d0e8      	beq.n	8001430 <TIM_Base_SetConfig+0x3c>
 800145e:	4a18      	ldr	r2, [pc, #96]	; (80014c0 <TIM_Base_SetConfig+0xcc>)
 8001460:	4290      	cmp	r0, r2
 8001462:	d0e5      	beq.n	8001430 <TIM_Base_SetConfig+0x3c>
 8001464:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001468:	4290      	cmp	r0, r2
 800146a:	d0e1      	beq.n	8001430 <TIM_Base_SetConfig+0x3c>
 800146c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001470:	4290      	cmp	r0, r2
 8001472:	d0dd      	beq.n	8001430 <TIM_Base_SetConfig+0x3c>
 8001474:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001478:	4290      	cmp	r0, r2
 800147a:	d0d9      	beq.n	8001430 <TIM_Base_SetConfig+0x3c>
 800147c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001480:	4290      	cmp	r0, r2
 8001482:	d0d5      	beq.n	8001430 <TIM_Base_SetConfig+0x3c>
 8001484:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001488:	4290      	cmp	r0, r2
 800148a:	d0d1      	beq.n	8001430 <TIM_Base_SetConfig+0x3c>
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800148c:	694a      	ldr	r2, [r1, #20]
 800148e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001492:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001494:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001496:	688b      	ldr	r3, [r1, #8]
 8001498:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800149a:	680b      	ldr	r3, [r1, #0]
 800149c:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <TIM_Base_SetConfig+0xc4>)
 80014a0:	4298      	cmp	r0, r3
 80014a2:	d006      	beq.n	80014b2 <TIM_Base_SetConfig+0xbe>
 80014a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80014a8:	4298      	cmp	r0, r3
 80014aa:	d002      	beq.n	80014b2 <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80014ac:	2301      	movs	r3, #1
 80014ae:	6143      	str	r3, [r0, #20]
}
 80014b0:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80014b2:	690b      	ldr	r3, [r1, #16]
 80014b4:	6303      	str	r3, [r0, #48]	; 0x30
 80014b6:	e7f9      	b.n	80014ac <TIM_Base_SetConfig+0xb8>
 80014b8:	40010000 	.word	0x40010000
 80014bc:	40000400 	.word	0x40000400
 80014c0:	40014000 	.word	0x40014000

080014c4 <HAL_TIM_Base_Init>:
{ 
 80014c4:	b510      	push	{r4, lr}
  if(htim == NULL)
 80014c6:	4604      	mov	r4, r0
 80014c8:	b1a0      	cbz	r0, 80014f4 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80014ca:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80014ce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80014d2:	b91b      	cbnz	r3, 80014dc <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80014d4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80014d8:	f000 fc6a 	bl	8001db0 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80014dc:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80014de:	6820      	ldr	r0, [r4, #0]
 80014e0:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;
 80014e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80014e6:	f7ff ff85 	bl	80013f4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80014ea:	2301      	movs	r3, #1
  return HAL_OK;
 80014ec:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80014ee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80014f2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80014f4:	2001      	movs	r0, #1
}
 80014f6:	bd10      	pop	{r4, pc}

080014f8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80014f8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80014fc:	2b01      	cmp	r3, #1
{
 80014fe:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8001500:	d01c      	beq.n	800153c <HAL_TIMEx_MasterConfigSynchronization+0x44>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001502:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001504:	4d0e      	ldr	r5, [pc, #56]	; (8001540 <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  tmpcr2 = htim->Instance->CR2;
 8001506:	6853      	ldr	r3, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001508:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 800150a:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800150c:	d003      	beq.n	8001516 <HAL_TIMEx_MasterConfigSynchronization+0x1e>
 800150e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001512:	42aa      	cmp	r2, r5
 8001514:	d103      	bne.n	800151e <HAL_TIMEx_MasterConfigSynchronization+0x26>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001516:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800151a:	684d      	ldr	r5, [r1, #4]
 800151c:	432b      	orrs	r3, r5
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800151e:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001520:	f023 0370 	bic.w	r3, r3, #112	; 0x70

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001524:	6889      	ldr	r1, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001526:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800152a:	432b      	orrs	r3, r5
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800152c:	4321      	orrs	r1, r4
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800152e:	6053      	str	r3, [r2, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 8001530:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 8001532:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8001534:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  return HAL_OK;
 8001538:	4618      	mov	r0, r3
 800153a:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 800153c:	2002      	movs	r0, #2
} 
 800153e:	bd30      	pop	{r4, r5, pc}
 8001540:	40010000 	.word	0x40010000

08001544 <HAL_TIMEx_CommutationCallback>:
 8001544:	4770      	bx	lr

08001546 <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001546:	4770      	bx	lr

08001548 <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001548:	4b23      	ldr	r3, [pc, #140]	; (80015d8 <SystemClock_Config+0x90>)
 800154a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800154c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 8001550:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8001552:	641a      	str	r2, [r3, #64]	; 0x40
{
 8001554:	b094      	sub	sp, #80	; 0x50
  __HAL_RCC_PWR_CLK_ENABLE();
 8001556:	6c1b      	ldr	r3, [r3, #64]	; 0x40

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001558:	2401      	movs	r4, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800155a:	4a20      	ldr	r2, [pc, #128]	; (80015dc <SystemClock_Config+0x94>)
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800155c:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 800155e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001566:	6813      	ldr	r3, [r2, #0]
 8001568:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800156c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001570:	6013      	str	r3, [r2, #0]
 8001572:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001574:	9407      	str	r4, [sp, #28]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001576:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800157a:	9301      	str	r3, [sp, #4]
 800157c:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800157e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001582:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001584:	2300      	movs	r3, #0
 8001586:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001588:	f7ff fc1e 	bl	8000dc8 <HAL_RCC_OscConfig>
 800158c:	4601      	mov	r1, r0
 800158e:	b100      	cbz	r0, 8001592 <SystemClock_Config+0x4a>
 8001590:	e7fe      	b.n	8001590 <SystemClock_Config+0x48>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001592:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001594:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001596:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001598:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800159a:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800159c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015a0:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015a6:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015a8:	f7ff fdcc 	bl	8001144 <HAL_RCC_ClockConfig>
 80015ac:	4604      	mov	r4, r0
 80015ae:	b100      	cbz	r0, 80015b2 <SystemClock_Config+0x6a>
 80015b0:	e7fe      	b.n	80015b0 <SystemClock_Config+0x68>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80015b2:	f7ff fe57 	bl	8001264 <HAL_RCC_GetHCLKFreq>
 80015b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ba:	fbb0 f0f3 	udiv	r0, r0, r3
 80015be:	f7ff f95d 	bl	800087c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80015c2:	2004      	movs	r0, #4
 80015c4:	f7ff f970 	bl	80008a8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80015c8:	4622      	mov	r2, r4
 80015ca:	4621      	mov	r1, r4
 80015cc:	f04f 30ff 	mov.w	r0, #4294967295
 80015d0:	f7ff f910 	bl	80007f4 <HAL_NVIC_SetPriority>
}
 80015d4:	b014      	add	sp, #80	; 0x50
 80015d6:	bd10      	pop	{r4, pc}
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40007000 	.word	0x40007000

080015e0 <main>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015e0:	4ea7      	ldr	r6, [pc, #668]	; (8001880 <main+0x2a0>)
  __HAL_RCC_GPIOH_CLK_ENABLE();

  /*Configure GPIO pins : SAI1_FSA_Pin SAI1_SDB_Pin SAI1_SCKA_Pin SAI1_SDA_Pin */
  GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SDB_Pin|SAI1_SCKA_Pin|SAI1_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e4:	2502      	movs	r5, #2
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015e6:	f04f 0a0c 	mov.w	sl, #12
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ea:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80015ee:	f04f 090a 	mov.w	r9, #10
{
 80015f2:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80015f6:	b095      	sub	sp, #84	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f8:	2703      	movs	r7, #3
  HAL_Init();
 80015fa:	f7fe fe31 	bl	8000260 <HAL_Init>
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80015fe:	f04f 0b04 	mov.w	fp, #4
  SystemClock_Config();
 8001602:	f7ff ffa1 	bl	8001548 <SystemClock_Config>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001606:	6b33      	ldr	r3, [r6, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001608:	a90f      	add	r1, sp, #60	; 0x3c
 800160a:	489e      	ldr	r0, [pc, #632]	; (8001884 <main+0x2a4>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800160c:	f043 0310 	orr.w	r3, r3, #16
 8001610:	6333      	str	r3, [r6, #48]	; 0x30
 8001612:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001614:	f003 0310 	and.w	r3, r3, #16
 8001618:	9304      	str	r3, [sp, #16]
 800161a:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800161c:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800161e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001622:	6333      	str	r3, [r6, #48]	; 0x30
 8001624:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800162a:	9305      	str	r3, [sp, #20]
 800162c:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800162e:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001630:	f043 0302 	orr.w	r3, r3, #2
 8001634:	6333      	str	r3, [r6, #48]	; 0x30
 8001636:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	9306      	str	r3, [sp, #24]
 800163e:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001640:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001642:	f043 0308 	orr.w	r3, r3, #8
 8001646:	6333      	str	r3, [r6, #48]	; 0x30
 8001648:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800164a:	f003 0308 	and.w	r3, r3, #8
 800164e:	9307      	str	r3, [sp, #28]
 8001650:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001652:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001654:	f043 0304 	orr.w	r3, r3, #4
 8001658:	6333      	str	r3, [r6, #48]	; 0x30
 800165a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800165c:	f003 0304 	and.w	r3, r3, #4
 8001660:	9308      	str	r3, [sp, #32]
 8001662:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001664:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001666:	f043 0301 	orr.w	r3, r3, #1
 800166a:	6333      	str	r3, [r6, #48]	; 0x30
 800166c:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	9309      	str	r3, [sp, #36]	; 0x24
 8001674:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001676:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001678:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800167c:	6333      	str	r3, [r6, #48]	; 0x30
 800167e:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001680:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001684:	930a      	str	r3, [sp, #40]	; 0x28
 8001686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001688:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800168a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800168e:	6333      	str	r3, [r6, #48]	; 0x30
 8001690:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001696:	930b      	str	r3, [sp, #44]	; 0x2c
 8001698:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800169a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800169c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016a0:	6333      	str	r3, [r6, #48]	; 0x30
 80016a2:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80016a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016a8:	930c      	str	r3, [sp, #48]	; 0x30
 80016aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016ac:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80016ae:	f043 0320 	orr.w	r3, r3, #32
 80016b2:	6333      	str	r3, [r6, #48]	; 0x30
 80016b4:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80016b6:	f003 0320 	and.w	r3, r3, #32
 80016ba:	930d      	str	r3, [sp, #52]	; 0x34
 80016bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016be:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80016c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016c4:	6333      	str	r3, [r6, #48]	; 0x30
 80016c6:	6b33      	ldr	r3, [r6, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c8:	9510      	str	r5, [sp, #64]	; 0x40
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d0:	9412      	str	r4, [sp, #72]	; 0x48
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016d2:	930e      	str	r3, [sp, #56]	; 0x38
 80016d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SDB_Pin|SAI1_SCKA_Pin|SAI1_SDA_Pin;
 80016d6:	2378      	movs	r3, #120	; 0x78
 80016d8:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80016da:	2306      	movs	r3, #6
 80016dc:	9313      	str	r3, [sp, #76]	; 0x4c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016de:	f7ff fa85 	bl	8000bec <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016e2:	2309      	movs	r3, #9
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80016e4:	a90f      	add	r1, sp, #60	; 0x3c
 80016e6:	4867      	ldr	r0, [pc, #412]	; (8001884 <main+0x2a4>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e8:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016ea:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80016ec:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f2:	9712      	str	r7, [sp, #72]	; 0x48
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80016f4:	f7ff fa7a 	bl	8000bec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80016f8:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016fc:	a90f      	add	r1, sp, #60	; 0x3c
 80016fe:	4862      	ldr	r0, [pc, #392]	; (8001888 <main+0x2a8>)
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001700:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001702:	230b      	movs	r3, #11
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001704:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001706:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170a:	9712      	str	r7, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800170c:	f7ff fa6e 	bl	8000bec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8001710:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001714:	a90f      	add	r1, sp, #60	; 0x3c
 8001716:	485b      	ldr	r0, [pc, #364]	; (8001884 <main+0x2a4>)
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8001718:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171a:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800171c:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001722:	9712      	str	r7, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001724:	f7ff fa62 	bl	8000bec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001728:	f44f 7340 	mov.w	r3, #768	; 0x300
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800172c:	a90f      	add	r1, sp, #60	; 0x3c
 800172e:	4857      	ldr	r0, [pc, #348]	; (800188c <main+0x2ac>)
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001730:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001732:	2312      	movs	r3, #18
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001734:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001738:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173a:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800173c:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001740:	f7ff fa54 	bl	8000bec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 8001744:	f643 4323 	movw	r3, #15395	; 0x3c23
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001748:	a90f      	add	r1, sp, #60	; 0x3c
 800174a:	4850      	ldr	r0, [pc, #320]	; (800188c <main+0x2ac>)
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 800174c:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174e:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001750:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001756:	9712      	str	r7, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001758:	f7ff fa48 	bl	8000bec <HAL_GPIO_Init>

  /*Configure GPIO pins : uSD_D3_Pin uSD_D2_Pin */
  GPIO_InitStruct.Pin = uSD_D3_Pin|uSD_D2_Pin;
 800175c:	2318      	movs	r3, #24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800175e:	a90f      	add	r1, sp, #60	; 0x3c
 8001760:	484a      	ldr	r0, [pc, #296]	; (800188c <main+0x2ac>)
  GPIO_InitStruct.Pin = uSD_D3_Pin|uSD_D2_Pin;
 8001762:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001764:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8001766:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176c:	9712      	str	r7, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176e:	f7ff fa3d 	bl	8000bec <HAL_GPIO_Init>

  /*Configure GPIO pins : uSD_CMD_Pin uSD_CLK_Pin */
  GPIO_InitStruct.Pin = uSD_CMD_Pin|uSD_CLK_Pin;
 8001772:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001774:	a90f      	add	r1, sp, #60	; 0x3c
 8001776:	4846      	ldr	r0, [pc, #280]	; (8001890 <main+0x2b0>)
  GPIO_InitStruct.Pin = uSD_CMD_Pin|uSD_CLK_Pin;
 8001778:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800177a:	230b      	movs	r3, #11
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177c:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800177e:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001782:	9712      	str	r7, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001784:	f7ff fa32 	bl	8000bec <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_RX_Pin */
  GPIO_InitStruct.Pin = WIFI_RX_Pin;
 8001788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
  HAL_GPIO_Init(WIFI_RX_GPIO_Port, &GPIO_InitStruct);
 800178c:	a90f      	add	r1, sp, #60	; 0x3c
 800178e:	4841      	ldr	r0, [pc, #260]	; (8001894 <main+0x2b4>)
  GPIO_InitStruct.Pin = WIFI_RX_Pin;
 8001790:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001792:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001794:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001796:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179a:	9712      	str	r7, [sp, #72]	; 0x48
  HAL_GPIO_Init(WIFI_RX_GPIO_Port, &GPIO_InitStruct);
 800179c:	f7ff fa26 	bl	8000bec <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_SDA_Pin */
  GPIO_InitStruct.Pin = AUDIO_SDA_Pin;
 80017a0:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
  HAL_GPIO_Init(AUDIO_SDA_GPIO_Port, &GPIO_InitStruct);
 80017a2:	a90f      	add	r1, sp, #60	; 0x3c
 80017a4:	4839      	ldr	r0, [pc, #228]	; (800188c <main+0x2ac>)
  GPIO_InitStruct.Pin = AUDIO_SDA_Pin;
 80017a6:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017a8:	2312      	movs	r3, #18
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017aa:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017ae:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 80017b0:	230b      	movs	r3, #11
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b2:	9712      	str	r7, [sp, #72]	; 0x48
  GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 80017b4:	9313      	str	r3, [sp, #76]	; 0x4c
  HAL_GPIO_Init(AUDIO_SDA_GPIO_Port, &GPIO_InitStruct);
 80017b6:	f7ff fa19 	bl	8000bec <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80017ba:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80017bc:	a90f      	add	r1, sp, #60	; 0x3c
 80017be:	4833      	ldr	r0, [pc, #204]	; (800188c <main+0x2ac>)
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80017c0:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c2:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80017c4:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ca:	9712      	str	r7, [sp, #72]	; 0x48
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80017cc:	f7ff fa0e 	bl	8000bec <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A12_Pin 
                           FMC_A10_Pin FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A12_Pin 
 80017d0:	f248 1337 	movw	r3, #33079	; 0x8137
                          |FMC_A10_Pin|FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017d4:	a90f      	add	r1, sp, #60	; 0x3c
 80017d6:	482c      	ldr	r0, [pc, #176]	; (8001888 <main+0x2a8>)
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A12_Pin 
 80017d8:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017da:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017dc:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e2:	9712      	str	r7, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017e4:	f7ff fa02 	bl	8000bec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD_USER1_Pin Audio_INT_Pin WIFI_RST_Pin ARD_D8_Pin 
                           LD_USER2_Pin ARD_D7_Pin ARD_D4_Pin ARD_D2_Pin */
  GPIO_InitStruct.Pin = LD_USER1_Pin|Audio_INT_Pin|WIFI_RST_Pin|ARD_D8_Pin 
 80017e8:	f247 033b 	movw	r3, #28731	; 0x703b
                          |LD_USER2_Pin|ARD_D7_Pin|ARD_D4_Pin|ARD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80017ec:	a90f      	add	r1, sp, #60	; 0x3c
 80017ee:	482a      	ldr	r0, [pc, #168]	; (8001898 <main+0x2b8>)
  GPIO_InitStruct.Pin = LD_USER1_Pin|Audio_INT_Pin|WIFI_RST_Pin|ARD_D8_Pin 
 80017f0:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f2:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80017f6:	f7ff f9f9 	bl	8000bec <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin 
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 80017fa:	f24c 7303 	movw	r3, #50947	; 0xc703
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017fe:	a90f      	add	r1, sp, #60	; 0x3c
 8001800:	4823      	ldr	r0, [pc, #140]	; (8001890 <main+0x2b0>)
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8001802:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001806:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180c:	9712      	str	r7, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800180e:	f7ff f9ed 	bl	8000bec <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM_DATIN5_Pin DFSDM_DATIN1_Pin */
  GPIO_InitStruct.Pin = DFSDM_DATIN5_Pin|DFSDM_DATIN1_Pin;
 8001812:	f640 0308 	movw	r3, #2056	; 0x808
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001816:	a90f      	add	r1, sp, #60	; 0x3c
 8001818:	481e      	ldr	r0, [pc, #120]	; (8001894 <main+0x2b4>)
  GPIO_InitStruct.Pin = DFSDM_DATIN5_Pin|DFSDM_DATIN1_Pin;
 800181a:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181c:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001820:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8001822:	9713      	str	r7, [sp, #76]	; 0x4c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001824:	f7ff f9e2 	bl	8000bec <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D0_Pin;
 8001828:	f44f 63c0 	mov.w	r3, #1536	; 0x600
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800182c:	a90f      	add	r1, sp, #60	; 0x3c
 800182e:	4819      	ldr	r0, [pc, #100]	; (8001894 <main+0x2b4>)
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D0_Pin;
 8001830:	930f      	str	r3, [sp, #60]	; 0x3c
 8001832:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001834:	2309      	movs	r3, #9
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001836:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001838:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183c:	9712      	str	r7, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800183e:	f7ff f9d5 	bl	8000bec <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D13_SCK_Pin */
  GPIO_InitStruct.Pin = ARD_D13_SCK_Pin;
 8001842:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(ARD_D13_SCK_GPIO_Port, &GPIO_InitStruct);
 8001846:	a90f      	add	r1, sp, #60	; 0x3c
 8001848:	4814      	ldr	r0, [pc, #80]	; (800189c <main+0x2bc>)
  GPIO_InitStruct.Pin = ARD_D13_SCK_Pin;
 800184a:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800184c:	2305      	movs	r3, #5
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184e:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001850:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001854:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(ARD_D13_SCK_GPIO_Port, &GPIO_InitStruct);
 8001856:	f7ff f9c9 	bl	8000bec <HAL_GPIO_Init>

  /*Configure GPIO pins : NC4_Pin NC5_Pin uSD_Detect_Pin */
  GPIO_InitStruct.Pin = NC4_Pin|NC5_Pin|uSD_Detect_Pin;
 800185a:	f44f 4211 	mov.w	r2, #37120	; 0x9100
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800185e:	a90f      	add	r1, sp, #60	; 0x3c
 8001860:	480f      	ldr	r0, [pc, #60]	; (80018a0 <main+0x2c0>)
  GPIO_InitStruct.Pin = NC4_Pin|NC5_Pin|uSD_Detect_Pin;
 8001862:	920f      	str	r2, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001864:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001868:	f7ff f9c0 	bl	8000bec <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL2_Pin D27_Pin D26_Pin FMC_NBL3_Pin 
                           D29_Pin D31_Pin D28_Pin D25_Pin 
                           D30_Pin D24_Pin */
  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin 
 800186c:	f240 62ff 	movw	r2, #1791	; 0x6ff
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001870:	a90f      	add	r1, sp, #60	; 0x3c
 8001872:	480b      	ldr	r0, [pc, #44]	; (80018a0 <main+0x2c0>)
  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin 
 8001874:	920f      	str	r2, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001876:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001878:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
 800187c:	e012      	b.n	80018a4 <main+0x2c4>
 800187e:	bf00      	nop
 8001880:	40023800 	.word	0x40023800
 8001884:	40021000 	.word	0x40021000
 8001888:	40021800 	.word	0x40021800
 800188c:	40020400 	.word	0x40020400
 8001890:	40020c00 	.word	0x40020c00
 8001894:	40020800 	.word	0x40020800
 8001898:	40022400 	.word	0x40022400
 800189c:	40020000 	.word	0x40020000
 80018a0:	40022000 	.word	0x40022000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a6:	9712      	str	r7, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80018a8:	f7ff f9a0 	bl	8000bec <HAL_GPIO_Init>

  /*Configure GPIO pins : NC3_Pin NC2_Pin NC1_Pin NC8_Pin 
                           NC7_Pin */
  GPIO_InitStruct.Pin = NC3_Pin|NC2_Pin|NC1_Pin|NC8_Pin 
 80018ac:	22f8      	movs	r2, #248	; 0xf8
                          |NC7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80018ae:	a90f      	add	r1, sp, #60	; 0x3c
 80018b0:	489e      	ldr	r0, [pc, #632]	; (8001b2c <main+0x54c>)
  GPIO_InitStruct.Pin = NC3_Pin|NC2_Pin|NC1_Pin|NC8_Pin 
 80018b2:	920f      	str	r2, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b4:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80018b8:	f7ff f998 	bl	8000bec <HAL_GPIO_Init>
  /*Configure GPIO pin : SPDIF_RX_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF7_SPDIFRX;
 80018bc:	2207      	movs	r2, #7
  GPIO_InitStruct.Pin = SPDIF_RX_Pin;
 80018be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(SPDIF_RX_GPIO_Port, &GPIO_InitStruct);
 80018c2:	a90f      	add	r1, sp, #60	; 0x3c
 80018c4:	489a      	ldr	r0, [pc, #616]	; (8001b30 <main+0x550>)
  GPIO_InitStruct.Alternate = GPIO_AF7_SPDIFRX;
 80018c6:	9213      	str	r2, [sp, #76]	; 0x4c
 80018c8:	9200      	str	r2, [sp, #0]
  GPIO_InitStruct.Pin = SPDIF_RX_Pin;
 80018ca:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018cc:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d0:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(SPDIF_RX_GPIO_Port, &GPIO_InitStruct);
 80018d2:	f7ff f98b 	bl	8000bec <HAL_GPIO_Init>

  /*Configure GPIO pins : uSD_D1_Pin uSD_D0_Pin */
  GPIO_InitStruct.Pin = uSD_D1_Pin|uSD_D0_Pin;
 80018d6:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018d8:	a90f      	add	r1, sp, #60	; 0x3c
 80018da:	4895      	ldr	r0, [pc, #596]	; (8001b30 <main+0x550>)
  GPIO_InitStruct.Pin = uSD_D1_Pin|uSD_D0_Pin;
 80018dc:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80018de:	230b      	movs	r3, #11
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e0:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80018e2:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e6:	9712      	str	r7, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018e8:	f7ff f980 	bl	8000bec <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_RXER_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin|OTG_FS_OverCurrent_Pin;
 80018ec:	2330      	movs	r3, #48	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018ee:	a90f      	add	r1, sp, #60	; 0x3c
 80018f0:	4890      	ldr	r0, [pc, #576]	; (8001b34 <main+0x554>)
  GPIO_InitStruct.Pin = RMII_RXER_Pin|OTG_FS_OverCurrent_Pin;
 80018f2:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018f4:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018f8:	f7ff f978 	bl	8000bec <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM_CKOUT_Pin;
 80018fc:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
  HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 80018fe:	a90f      	add	r1, sp, #60	; 0x3c
 8001900:	488c      	ldr	r0, [pc, #560]	; (8001b34 <main+0x554>)
  GPIO_InitStruct.Pin = DFSDM_CKOUT_Pin;
 8001902:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001904:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001908:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 800190a:	9713      	str	r7, [sp, #76]	; 0x4c
  HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 800190c:	f7ff f96e 	bl	8000bec <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_NSS_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 8001910:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8001914:	a90f      	add	r1, sp, #60	; 0x3c
 8001916:	4888      	ldr	r0, [pc, #544]	; (8001b38 <main+0x558>)
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 8001918:	930f      	str	r3, [sp, #60]	; 0x3c
 800191a:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800191c:	2305      	movs	r3, #5
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191e:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001920:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001924:	9712      	str	r7, [sp, #72]	; 0x48
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8001926:	f7ff f961 	bl	8000bec <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin 
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin 
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 800192a:	f64f 013f 	movw	r1, #63551	; 0xf83f
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800192e:	4883      	ldr	r0, [pc, #524]	; (8001b3c <main+0x55c>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001930:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8001932:	910f      	str	r1, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001934:	a90f      	add	r1, sp, #60	; 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001936:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193c:	9712      	str	r7, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800193e:	f7ff f955 	bl	8000bec <HAL_GPIO_Init>
  /*Configure GPIO pin : WIFI_TX_Pin */
  GPIO_InitStruct.Pin = WIFI_TX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001942:	2308      	movs	r3, #8
  HAL_GPIO_Init(WIFI_TX_GPIO_Port, &GPIO_InitStruct);
 8001944:	a90f      	add	r1, sp, #60	; 0x3c
 8001946:	487b      	ldr	r0, [pc, #492]	; (8001b34 <main+0x554>)
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001948:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194a:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Pin = WIFI_TX_Pin;
 800194c:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001952:	9712      	str	r7, [sp, #72]	; 0x48
  HAL_GPIO_Init(WIFI_TX_GPIO_Port, &GPIO_InitStruct);
 8001954:	f7ff f94a 	bl	8000bec <HAL_GPIO_Init>

  /*Configure GPIO pins : D23_Pin D21_Pin D22_Pin FMC_SDNME_Pin 
                           FMC_SDNE0_Pin FMC_SDCKE0_Pin D20_Pin FMC_D_7_Pin 
                           FMC_D19_Pin FMC_D16_Pin FMC_D18_Pin */
  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|FMC_SDNME_Pin 
 8001958:	f64f 712c 	movw	r1, #65324	; 0xff2c
                          |FMC_D19_Pin|FMC_D16_Pin|FMC_D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800195c:	4878      	ldr	r0, [pc, #480]	; (8001b40 <main+0x560>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195e:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|FMC_SDNME_Pin 
 8001960:	910f      	str	r1, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001962:	a90f      	add	r1, sp, #60	; 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001964:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
  HAL_GPIO_Init(AUDIO_SCL_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : QSPI_D3_Pin */
  GPIO_InitStruct.Pin = QSPI_D3_Pin;
 8001968:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196e:	9712      	str	r7, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001970:	f7ff f93c 	bl	8000bec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001974:	f44f 6180 	mov.w	r1, #1024	; 0x400
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001978:	9a00      	ldr	r2, [sp, #0]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800197a:	486f      	ldr	r0, [pc, #444]	; (8001b38 <main+0x558>)
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 800197c:	910f      	str	r1, [sp, #60]	; 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800197e:	a90f      	add	r1, sp, #60	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001980:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001982:	9213      	str	r2, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001986:	9712      	str	r7, [sp, #72]	; 0x48
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001988:	f7ff f930 	bl	8000bec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 800198c:	f44f 7100 	mov.w	r1, #512	; 0x200
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001990:	9a00      	ldr	r2, [sp, #0]
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001992:	4869      	ldr	r0, [pc, #420]	; (8001b38 <main+0x558>)
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001994:	910f      	str	r1, [sp, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001996:	a90f      	add	r1, sp, #60	; 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001998:	9213      	str	r2, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199a:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199e:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80019a0:	f7ff f924 	bl	8000bec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 80019a4:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 80019a6:	a90f      	add	r1, sp, #60	; 0x3c
 80019a8:	4866      	ldr	r0, [pc, #408]	; (8001b44 <main+0x564>)
  GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 80019aa:	930f      	str	r3, [sp, #60]	; 0x3c
 80019ac:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ae:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80019b0:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b6:	9712      	str	r7, [sp, #72]	; 0x48
  HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 80019b8:	f7ff f918 	bl	8000bec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D5_PWM_Pin;
 80019bc:	f44f 7280 	mov.w	r2, #256	; 0x100
  HAL_GPIO_Init(ARD_D5_PWM_GPIO_Port, &GPIO_InitStruct);
 80019c0:	a90f      	add	r1, sp, #60	; 0x3c
 80019c2:	4861      	ldr	r0, [pc, #388]	; (8001b48 <main+0x568>)
  GPIO_InitStruct.Pin = ARD_D5_PWM_Pin;
 80019c4:	920f      	str	r2, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c6:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019c8:	9513      	str	r5, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019cc:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(ARD_D5_PWM_GPIO_Port, &GPIO_InitStruct);
 80019ce:	f7ff f90d 	bl	8000bec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D0_RX_Pin|ARDUINO_TX_D1_Pin;
 80019d2:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019d4:	a90f      	add	r1, sp, #60	; 0x3c
 80019d6:	485c      	ldr	r0, [pc, #368]	; (8001b48 <main+0x568>)
  GPIO_InitStruct.Pin = ARD_D0_RX_Pin|ARDUINO_TX_D1_Pin;
 80019d8:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80019da:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019dc:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80019de:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e2:	9712      	str	r7, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e4:	f7ff f902 	bl	8000bec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80019e8:	2210      	movs	r2, #16
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80019ea:	a90f      	add	r1, sp, #60	; 0x3c
 80019ec:	4854      	ldr	r0, [pc, #336]	; (8001b40 <main+0x560>)
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80019ee:	920f      	str	r2, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f0:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80019f2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f8:	9712      	str	r7, [sp, #72]	; 0x48
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80019fa:	f7ff f8f7 	bl	8000bec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 80019fe:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8001a00:	a90f      	add	r1, sp, #60	; 0x3c
 8001a02:	484b      	ldr	r0, [pc, #300]	; (8001b30 <main+0x550>)
  GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8001a04:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001a06:	2306      	movs	r3, #6
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a08:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001a0a:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0e:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8001a10:	f7ff f8ec 	bl	8000bec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = EXT_SDA_Pin|EXT_SCL_Pin;
 8001a14:	2248      	movs	r2, #72	; 0x48
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a16:	a90f      	add	r1, sp, #60	; 0x3c
 8001a18:	4845      	ldr	r0, [pc, #276]	; (8001b30 <main+0x550>)
  GPIO_InitStruct.Pin = EXT_SDA_Pin|EXT_SCL_Pin;
 8001a1a:	920f      	str	r2, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a1c:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a20:	f7ff f8e4 	bl	8000bec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D6_PWM_Pin;
 8001a24:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(ARD_D6_PWM_GPIO_Port, &GPIO_InitStruct);
 8001a26:	a90f      	add	r1, sp, #60	; 0x3c
 8001a28:	4844      	ldr	r0, [pc, #272]	; (8001b3c <main+0x55c>)
  GPIO_InitStruct.Pin = ARD_D6_PWM_Pin;
 8001a2a:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2c:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a30:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001a32:	9713      	str	r7, [sp, #76]	; 0x4c
  HAL_GPIO_Init(ARD_D6_PWM_GPIO_Port, &GPIO_InitStruct);
 8001a34:	f7ff f8da 	bl	8000bec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D3_PWM_Pin;
 8001a38:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(ARD_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 8001a3a:	a90f      	add	r1, sp, #60	; 0x3c
 8001a3c:	483f      	ldr	r0, [pc, #252]	; (8001b3c <main+0x55c>)
  GPIO_InitStruct.Pin = ARD_D3_PWM_Pin;
 8001a3e:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a40:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a44:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001a46:	9713      	str	r7, [sp, #76]	; 0x4c
  HAL_GPIO_Init(ARD_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 8001a48:	f7ff f8d0 	bl	8000bec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_A1_Pin|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8001a4c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a50:	a90f      	add	r1, sp, #60	; 0x3c
 8001a52:	483a      	ldr	r0, [pc, #232]	; (8001b3c <main+0x55c>)
  GPIO_InitStruct.Pin = ARDUINO_A1_Pin|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8001a54:	920f      	str	r2, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a56:	9710      	str	r7, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a5a:	f7ff f8c7 	bl	8000bec <HAL_GPIO_Init>
  HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8001a5e:	a90f      	add	r1, sp, #60	; 0x3c
 8001a60:	4839      	ldr	r0, [pc, #228]	; (8001b48 <main+0x568>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a62:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001a64:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pin = ULPI_STP_Pin;
 8001a68:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6e:	9712      	str	r7, [sp, #72]	; 0x48
  HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8001a70:	f7ff f8bc 	bl	8000bec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001a74:	2232      	movs	r2, #50	; 0x32
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a76:	230b      	movs	r3, #11
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a78:	a90f      	add	r1, sp, #60	; 0x3c
 8001a7a:	4833      	ldr	r0, [pc, #204]	; (8001b48 <main+0x568>)
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001a7c:	920f      	str	r2, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7e:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a80:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a84:	9712      	str	r7, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a86:	f7ff f8b1 	bl	8000bec <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001a8a:	2309      	movs	r3, #9
  HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001a8c:	a90f      	add	r1, sp, #60	; 0x3c
 8001a8e:	482f      	ldr	r0, [pc, #188]	; (8001b4c <main+0x56c>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a90:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001a92:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8001a94:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9a:	9712      	str	r7, [sp, #72]	; 0x48
  HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001a9c:	f7ff f8a6 	bl	8000bec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = AUDIO_SCL_Pin;
 8001aa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(AUDIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8001aa4:	a90f      	add	r1, sp, #60	; 0x3c
 8001aa6:	4823      	ldr	r0, [pc, #140]	; (8001b34 <main+0x554>)
  GPIO_InitStruct.Pin = AUDIO_SCL_Pin;
 8001aa8:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aaa:	2312      	movs	r3, #18
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aac:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ab0:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab2:	9712      	str	r7, [sp, #72]	; 0x48
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001ab4:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  HAL_GPIO_Init(AUDIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8001ab8:	f7ff f898 	bl	8000bec <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001abc:	2309      	movs	r3, #9
  HAL_GPIO_Init(QSPI_D3_GPIO_Port, &GPIO_InitStruct);
 8001abe:	a90f      	add	r1, sp, #60	; 0x3c
 8001ac0:	481c      	ldr	r0, [pc, #112]	; (8001b34 <main+0x554>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac2:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001ac4:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pin = QSPI_D3_Pin;
 8001ac6:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001acc:	9712      	str	r7, [sp, #72]	; 0x48
  HAL_GPIO_Init(QSPI_D3_GPIO_Port, &GPIO_InitStruct);
 8001ace:	f7ff f88d 	bl	8000bec <HAL_GPIO_Init>
  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ad2:	230b      	movs	r3, #11
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001ad4:	2286      	movs	r2, #134	; 0x86
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad6:	a90f      	add	r1, sp, #60	; 0x3c
 8001ad8:	4817      	ldr	r0, [pc, #92]	; (8001b38 <main+0x558>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ada:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001adc:	920f      	str	r2, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ade:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae2:	9712      	str	r7, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae4:	f7ff f882 	bl	8000bec <HAL_GPIO_Init>

  /*Configure GPIO pin : B_USER_Pin */
  GPIO_InitStruct.Pin = B_USER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ae8:	4a19      	ldr	r2, [pc, #100]	; (8001b50 <main+0x570>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8001aea:	a90f      	add	r1, sp, #60	; 0x3c
 8001aec:	4812      	ldr	r0, [pc, #72]	; (8001b38 <main+0x558>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001aee:	9210      	str	r2, [sp, #64]	; 0x40
  GPIO_InitStruct.Pin = B_USER_Pin;
 8001af0:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8001af6:	f7ff f879 	bl	8000bec <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_TX_Pin */
  GPIO_InitStruct.Pin = SPDIF_TX_Pin;
 8001afa:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
  HAL_GPIO_Init(SPDIF_TX_GPIO_Port, &GPIO_InitStruct);
 8001afc:	a90f      	add	r1, sp, #60	; 0x3c
 8001afe:	480d      	ldr	r0, [pc, #52]	; (8001b34 <main+0x554>)
  GPIO_InitStruct.Pin = SPDIF_TX_Pin;
 8001b00:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b02:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001b04:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0a:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(SPDIF_TX_GPIO_Port, &GPIO_InitStruct);
 8001b0c:	f7ff f86e 	bl	8000bec <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 8001b10:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8001b12:	a90f      	add	r1, sp, #60	; 0x3c
 8001b14:	480a      	ldr	r0, [pc, #40]	; (8001b40 <main+0x560>)
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 8001b16:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b18:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8001b1c:	f7ff f866 	bl	8000bec <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001b20:	2328      	movs	r3, #40	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b22:	a90f      	add	r1, sp, #60	; 0x3c
 8001b24:	4804      	ldr	r0, [pc, #16]	; (8001b38 <main+0x558>)
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001b26:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b28:	9510      	str	r5, [sp, #64]	; 0x40
 8001b2a:	e013      	b.n	8001b54 <main+0x574>
 8001b2c:	40022800 	.word	0x40022800
 8001b30:	40021800 	.word	0x40021800
 8001b34:	40020c00 	.word	0x40020c00
 8001b38:	40020000 	.word	0x40020000
 8001b3c:	40021400 	.word	0x40021400
 8001b40:	40021c00 	.word	0x40021c00
 8001b44:	40022000 	.word	0x40022000
 8001b48:	40020800 	.word	0x40020800
 8001b4c:	40020400 	.word	0x40020400
 8001b50:	10110000 	.word	0x10110000
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b54:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

	/* GREEN LED USER config */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b58:	f04f 0920 	mov.w	r9, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5e:	9712      	str	r7, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b60:	f7ff f844 	bl	8000bec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001b64:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001b66:	a90f      	add	r1, sp, #60	; 0x3c
 8001b68:	483f      	ldr	r0, [pc, #252]	; (8001c68 <main+0x688>)
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001b6a:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001b6c:	2309      	movs	r3, #9
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6e:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001b70:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b74:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001b76:	f7ff f839 	bl	8000bec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001b7a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7e:	a90f      	add	r1, sp, #60	; 0x3c
 8001b80:	483a      	ldr	r0, [pc, #232]	; (8001c6c <main+0x68c>)
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001b82:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b84:	2305      	movs	r3, #5
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b86:	9510      	str	r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b88:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8c:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b8e:	f7ff f82d 	bl	8000bec <HAL_GPIO_Init>

	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001b92:	a90f      	add	r1, sp, #60	; 0x3c
 8001b94:	4836      	ldr	r0, [pc, #216]	; (8001c70 <main+0x690>)
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b96:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b9a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8001b9e:	9712      	str	r7, [sp, #72]	; 0x48
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	9411      	str	r4, [sp, #68]	; 0x44
	HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001ba2:	f7ff f823 	bl	8000bec <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_13;

	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001ba6:	a90f      	add	r1, sp, #60	; 0x3c
 8001ba8:	4831      	ldr	r0, [pc, #196]	; (8001c70 <main+0x690>)
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001baa:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bae:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8001bb2:	9712      	str	r7, [sp, #72]	; 0x48
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	9411      	str	r4, [sp, #68]	; 0x44
	HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001bb6:	f7ff f819 	bl	8000bec <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001bba:	6b33      	ldr	r3, [r6, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001bbc:	4622      	mov	r2, r4
 8001bbe:	4621      	mov	r1, r4
 8001bc0:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001bc2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  htim6.Instance = TIM6;
 8001bc6:	4d2b      	ldr	r5, [pc, #172]	; (8001c74 <main+0x694>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001bc8:	6333      	str	r3, [r6, #48]	; 0x30
 8001bca:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001bcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bd0:	9303      	str	r3, [sp, #12]
 8001bd2:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001bd4:	f7fe fe0e 	bl	80007f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001bd8:	2038      	movs	r0, #56	; 0x38
 8001bda:	f7fe fe43 	bl	8000864 <HAL_NVIC_EnableIRQ>
  htim6.Init.Prescaler = 12000;
 8001bde:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8001be2:	4a25      	ldr	r2, [pc, #148]	; (8001c78 <main+0x698>)
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001be4:	4628      	mov	r0, r5
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be6:	60ac      	str	r4, [r5, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001be8:	61ac      	str	r4, [r5, #24]
  htim6.Init.Prescaler = 12000;
 8001bea:	e885 000c 	stmia.w	r5, {r2, r3}
  htim6.Init.Period = 5000;
 8001bee:	f241 3388 	movw	r3, #5000	; 0x1388
 8001bf2:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001bf4:	f7ff fc66 	bl	80014c4 <HAL_TIM_Base_Init>
 8001bf8:	b100      	cbz	r0, 8001bfc <main+0x61c>
 8001bfa:	e7fe      	b.n	8001bfa <main+0x61a>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bfc:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001bfe:	a90f      	add	r1, sp, #60	; 0x3c
 8001c00:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001c02:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c06:	f7ff fc77 	bl	80014f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c0a:	b100      	cbz	r0, 8001c0e <main+0x62e>
 8001c0c:	e7fe      	b.n	8001c0c <main+0x62c>
  hadc1.Instance = ADC1;
 8001c0e:	4c1b      	ldr	r4, [pc, #108]	; (8001c7c <main+0x69c>)
 8001c10:	4b1b      	ldr	r3, [pc, #108]	; (8001c80 <main+0x6a0>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001c12:	6060      	str	r0, [r4, #4]
  hadc1.Instance = ADC1;
 8001c14:	6023      	str	r3, [r4, #0]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001c16:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c1a:	60a0      	str	r0, [r4, #8]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001c1c:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 8001c1e:	f04f 6350 	mov.w	r3, #218103808	; 0xd000000
  hadc1.Init.ScanConvMode = DISABLE;
 8001c22:	6120      	str	r0, [r4, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c24:	61a0      	str	r0, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c26:	6220      	str	r0, [r4, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c28:	60e0      	str	r0, [r4, #12]
  hadc1.Init.EOCSelection = DISABLE;
 8001c2a:	6160      	str	r0, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c2c:	4620      	mov	r0, r4
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 8001c2e:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc1.Init.NbrOfConversion = 1;
 8001c30:	f8c4 801c 	str.w	r8, [r4, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001c34:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c38:	f7fe fb2c 	bl	8000294 <HAL_ADC_Init>
 8001c3c:	b100      	cbz	r0, 8001c40 <main+0x660>
 8001c3e:	e7fe      	b.n	8001c3e <main+0x65e>
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001c40:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c42:	a90f      	add	r1, sp, #60	; 0x3c
 8001c44:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_4;
 8001c46:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  sConfig.Rank = 1;
 8001c4a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c4e:	f7fe fd1d 	bl	800068c <HAL_ADC_ConfigChannel>
 8001c52:	b100      	cbz	r0, 8001c56 <main+0x676>
 8001c54:	e7fe      	b.n	8001c54 <main+0x674>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADCreadings, 1);
 8001c56:	4642      	mov	r2, r8
 8001c58:	490a      	ldr	r1, [pc, #40]	; (8001c84 <main+0x6a4>)
 8001c5a:	4620      	mov	r0, r4
 8001c5c:	f7fe fbbe 	bl	80003dc <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim6);
 8001c60:	4628      	mov	r0, r5
 8001c62:	f7ff fb05 	bl	8001270 <HAL_TIM_Base_Start>
 8001c66:	e7fe      	b.n	8001c66 <main+0x686>
 8001c68:	40021c00 	.word	0x40021c00
 8001c6c:	40020400 	.word	0x40020400
 8001c70:	40022400 	.word	0x40022400
 8001c74:	200000d0 	.word	0x200000d0
 8001c78:	40001000 	.word	0x40001000
 8001c7c:	20000028 	.word	0x20000028
 8001c80:	40012000 	.word	0x40012000
 8001c84:	20000020 	.word	0x20000020

08001c88 <HAL_ADC_ConvCpltCallback>:
}

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){

	HAL_GPIO_TogglePin(GPIOJ, GPIO_PIN_5);
 8001c88:	2120      	movs	r1, #32
 8001c8a:	4801      	ldr	r0, [pc, #4]	; (8001c90 <HAL_ADC_ConvCpltCallback+0x8>)
 8001c8c:	f7ff b898 	b.w	8000dc0 <HAL_GPIO_TogglePin>
 8001c90:	40022400 	.word	0x40022400

08001c94 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8001c94:	e7fe      	b.n	8001c94 <_Error_Handler>

08001c96 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c96:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c98:	2003      	movs	r0, #3
 8001c9a:	f7fe fd99 	bl	80007d0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f06f 000b 	mvn.w	r0, #11
 8001ca4:	4611      	mov	r1, r2
 8001ca6:	f7fe fda5 	bl	80007f4 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001caa:	2200      	movs	r2, #0
 8001cac:	f06f 000a 	mvn.w	r0, #10
 8001cb0:	4611      	mov	r1, r2
 8001cb2:	f7fe fd9f 	bl	80007f4 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f06f 0009 	mvn.w	r0, #9
 8001cbc:	4611      	mov	r1, r2
 8001cbe:	f7fe fd99 	bl	80007f4 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f06f 0004 	mvn.w	r0, #4
 8001cc8:	4611      	mov	r1, r2
 8001cca:	f7fe fd93 	bl	80007f4 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f06f 0003 	mvn.w	r0, #3
 8001cd4:	4611      	mov	r1, r2
 8001cd6:	f7fe fd8d 	bl	80007f4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f06f 0001 	mvn.w	r0, #1
 8001ce0:	4611      	mov	r1, r2
 8001ce2:	f7fe fd87 	bl	80007f4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cec:	4611      	mov	r1, r2

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001cf2:	f7fe bd7f 	b.w	80007f4 <HAL_NVIC_SetPriority>
	...

08001cf8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8001cf8:	6802      	ldr	r2, [r0, #0]
 8001cfa:	4b27      	ldr	r3, [pc, #156]	; (8001d98 <HAL_ADC_MspInit+0xa0>)
 8001cfc:	429a      	cmp	r2, r3
{
 8001cfe:	b570      	push	{r4, r5, r6, lr}
 8001d00:	4606      	mov	r6, r0
 8001d02:	b086      	sub	sp, #24
  if(hadc->Instance==ADC1)
 8001d04:	d145      	bne.n	8001d92 <HAL_ADC_MspInit+0x9a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d06:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6 
    */
    GPIO_InitStruct.Pin = ARD_A2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2500      	movs	r5, #0
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d0c:	2403      	movs	r4, #3
    HAL_GPIO_Init(ARD_A2_GPIO_Port, &GPIO_InitStruct);
 8001d0e:	4823      	ldr	r0, [pc, #140]	; (8001d9c <HAL_ADC_MspInit+0xa4>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d16:	645a      	str	r2, [r3, #68]	; 0x44
 8001d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d1a:	9402      	str	r4, [sp, #8]
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	9503      	str	r5, [sp, #12]
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = ARD_A2_Pin;
 8001d26:	2304      	movs	r3, #4
    HAL_GPIO_Init(ARD_A2_GPIO_Port, &GPIO_InitStruct);
 8001d28:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Pin = ARD_A2_Pin;
 8001d2c:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(ARD_A2_GPIO_Port, &GPIO_InitStruct);
 8001d2e:	f7fe ff5d 	bl	8000bec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A0_Pin;
 8001d32:	2350      	movs	r3, #80	; 0x50
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d34:	481a      	ldr	r0, [pc, #104]	; (8001da0 <HAL_ADC_MspInit+0xa8>)
 8001d36:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A0_Pin;
 8001d38:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d3a:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3e:	f7fe ff55 	bl	8000bec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001d42:	4c18      	ldr	r4, [pc, #96]	; (8001da4 <HAL_ADC_MspInit+0xac>)
 8001d44:	4b18      	ldr	r3, [pc, #96]	; (8001da8 <HAL_ADC_MspInit+0xb0>)
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d46:	4620      	mov	r0, r4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d48:	60a5      	str	r5, [r4, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d4a:	60e5      	str	r5, [r4, #12]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d4c:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001d4e:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001d52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d56:	6123      	str	r3, [r4, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d5c:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d62:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d68:	61e3      	str	r3, [r4, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001d6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d6e:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d70:	f7fe fdc2 	bl	80008f8 <HAL_DMA_Init>
 8001d74:	b118      	cbz	r0, 8001d7e <HAL_ADC_MspInit+0x86>
    {
      _Error_Handler(__FILE__, __LINE__);
 8001d76:	2179      	movs	r1, #121	; 0x79
 8001d78:	480c      	ldr	r0, [pc, #48]	; (8001dac <HAL_ADC_MspInit+0xb4>)
 8001d7a:	f7ff ff8b 	bl	8001c94 <_Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001d7e:	2200      	movs	r2, #0
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d80:	63b4      	str	r4, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001d82:	2012      	movs	r0, #18
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d84:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001d86:	4611      	mov	r1, r2
 8001d88:	f7fe fd34 	bl	80007f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001d8c:	2012      	movs	r0, #18
 8001d8e:	f7fe fd69 	bl	8000864 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d92:	b006      	add	sp, #24
 8001d94:	bd70      	pop	{r4, r5, r6, pc}
 8001d96:	bf00      	nop
 8001d98:	40012000 	.word	0x40012000
 8001d9c:	40020800 	.word	0x40020800
 8001da0:	40020000 	.word	0x40020000
 8001da4:	20000070 	.word	0x20000070
 8001da8:	40026410 	.word	0x40026410
 8001dac:	08001f28 	.word	0x08001f28

08001db0 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001db0:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM6)
 8001db2:	4b0d      	ldr	r3, [pc, #52]	; (8001de8 <HAL_TIM_Base_MspInit+0x38>)
 8001db4:	6802      	ldr	r2, [r0, #0]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d112      	bne.n	8001de0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001dba:	f503 330a 	add.w	r3, r3, #141312	; 0x22800
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001dbe:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001dc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dc2:	f042 0210 	orr.w	r2, r2, #16
 8001dc6:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001dc8:	2200      	movs	r2, #0
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001dcc:	4611      	mov	r1, r2
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001dce:	f003 0310 	and.w	r3, r3, #16
 8001dd2:	9301      	str	r3, [sp, #4]
 8001dd4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001dd6:	f7fe fd0d 	bl	80007f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001dda:	2036      	movs	r0, #54	; 0x36
 8001ddc:	f7fe fd42 	bl	8000864 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001de0:	b003      	add	sp, #12
 8001de2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001de6:	bf00      	nop
 8001de8:	40001000 	.word	0x40001000

08001dec <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001dec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dee:	f7fe fa43 	bl	8000278 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001df2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8001df6:	f7fe bd64 	b.w	80008c2 <HAL_SYSTICK_IRQHandler>
	...

08001dfc <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001dfc:	4801      	ldr	r0, [pc, #4]	; (8001e04 <ADC_IRQHandler+0x8>)
 8001dfe:	f7fe bba5 	b.w	800054c <HAL_ADC_IRQHandler>
 8001e02:	bf00      	nop
 8001e04:	20000028 	.word	0x20000028

08001e08 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e08:	4801      	ldr	r0, [pc, #4]	; (8001e10 <TIM6_DAC_IRQHandler+0x8>)
 8001e0a:	f7ff ba43 	b.w	8001294 <HAL_TIM_IRQHandler>
 8001e0e:	bf00      	nop
 8001e10:	200000d0 	.word	0x200000d0

08001e14 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e14:	4801      	ldr	r0, [pc, #4]	; (8001e1c <DMA2_Stream0_IRQHandler+0x8>)
 8001e16:	f7fe be2b 	b.w	8000a70 <HAL_DMA_IRQHandler>
 8001e1a:	bf00      	nop
 8001e1c:	20000070 	.word	0x20000070

08001e20 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e20:	490f      	ldr	r1, [pc, #60]	; (8001e60 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001e22:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e24:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001e28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8001e30:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <SystemInit+0x44>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	f042 0201 	orr.w	r2, r2, #1
 8001e38:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001e3a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001e42:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001e46:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001e48:	4a07      	ldr	r2, [pc, #28]	; (8001e68 <SystemInit+0x48>)
 8001e4a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e52:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001e54:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e56:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001e5a:	608b      	str	r3, [r1, #8]
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	e000ed00 	.word	0xe000ed00
 8001e64:	40023800 	.word	0x40023800
 8001e68:	24003010 	.word	0x24003010

08001e6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ea4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e70:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e72:	e003      	b.n	8001e7c <LoopCopyDataInit>

08001e74 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e74:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e76:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e78:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e7a:	3104      	adds	r1, #4

08001e7c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e7c:	480b      	ldr	r0, [pc, #44]	; (8001eac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e7e:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001e80:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e82:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e84:	d3f6      	bcc.n	8001e74 <CopyDataInit>
  ldr  r2, =_sbss
 8001e86:	4a0b      	ldr	r2, [pc, #44]	; (8001eb4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001e88:	e002      	b.n	8001e90 <LoopFillZerobss>

08001e8a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001e8a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e8c:	f842 3b04 	str.w	r3, [r2], #4

08001e90 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e90:	4b09      	ldr	r3, [pc, #36]	; (8001eb8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001e92:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e94:	d3f9      	bcc.n	8001e8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e96:	f7ff ffc3 	bl	8001e20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e9a:	f000 f811 	bl	8001ec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e9e:	f7ff fb9f 	bl	80015e0 <main>
  bx  lr    
 8001ea2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ea4:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001ea8:	08001f5c 	.word	0x08001f5c
  ldr  r0, =_sdata
 8001eac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001eb0:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8001eb4:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8001eb8:	20000110 	.word	0x20000110

08001ebc <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ebc:	e7fe      	b.n	8001ebc <BusFault_Handler>
	...

08001ec0 <__libc_init_array>:
 8001ec0:	b570      	push	{r4, r5, r6, lr}
 8001ec2:	4e0d      	ldr	r6, [pc, #52]	; (8001ef8 <__libc_init_array+0x38>)
 8001ec4:	4c0d      	ldr	r4, [pc, #52]	; (8001efc <__libc_init_array+0x3c>)
 8001ec6:	1ba4      	subs	r4, r4, r6
 8001ec8:	10a4      	asrs	r4, r4, #2
 8001eca:	2500      	movs	r5, #0
 8001ecc:	42a5      	cmp	r5, r4
 8001ece:	d109      	bne.n	8001ee4 <__libc_init_array+0x24>
 8001ed0:	4e0b      	ldr	r6, [pc, #44]	; (8001f00 <__libc_init_array+0x40>)
 8001ed2:	4c0c      	ldr	r4, [pc, #48]	; (8001f04 <__libc_init_array+0x44>)
 8001ed4:	f000 f818 	bl	8001f08 <_init>
 8001ed8:	1ba4      	subs	r4, r4, r6
 8001eda:	10a4      	asrs	r4, r4, #2
 8001edc:	2500      	movs	r5, #0
 8001ede:	42a5      	cmp	r5, r4
 8001ee0:	d105      	bne.n	8001eee <__libc_init_array+0x2e>
 8001ee2:	bd70      	pop	{r4, r5, r6, pc}
 8001ee4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ee8:	4798      	blx	r3
 8001eea:	3501      	adds	r5, #1
 8001eec:	e7ee      	b.n	8001ecc <__libc_init_array+0xc>
 8001eee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ef2:	4798      	blx	r3
 8001ef4:	3501      	adds	r5, #1
 8001ef6:	e7f2      	b.n	8001ede <__libc_init_array+0x1e>
 8001ef8:	08001f54 	.word	0x08001f54
 8001efc:	08001f54 	.word	0x08001f54
 8001f00:	08001f54 	.word	0x08001f54
 8001f04:	08001f58 	.word	0x08001f58

08001f08 <_init>:
 8001f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f0a:	bf00      	nop
 8001f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f0e:	bc08      	pop	{r3}
 8001f10:	469e      	mov	lr, r3
 8001f12:	4770      	bx	lr

08001f14 <_fini>:
 8001f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f16:	bf00      	nop
 8001f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f1a:	bc08      	pop	{r3}
 8001f1c:	469e      	mov	lr, r3
 8001f1e:	4770      	bx	lr
